I need your help with my current project, here are the files I have so far

{D:\Projects\FSD-Xojo-Rewrite\App.xojo_code}
```xojo
#tag Class
Protected Class App
Inherits ConsoleApplication
	#tag Event
		Function Run(args() as String) As Integer
		  fsdServer.Initilize()
		  Dim sv as new fsdServer.server("1","Main","sascha@maigatter.net","127.0.0.1","1.0.0",1,"ll")
		  Dim cl as new fsdServer.client("12",sv,"AAL222",1,1,"1.0.0","Sascha",11)
		  Dim ci as new fsdServer.clinterface(999,"mmm","Kkk")
		  fsdserver.clientinterface = ci
		  fsdServer.myserver = sv
		  Dim cu as new fsdServer.cluser(1,ci,"21",21,21)
		  cu.thisclient = cl
		  ci.sendap(cl,nil)
		  cu.readmotd()
		End Function
	#tag EndEvent


	#tag ViewBehavior
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\Build Automation.xojo_code}
```xojo
#tag BuildAutomation
			Begin BuildStepList Linux
				Begin BuildProjectStep Build
				End
			End
			Begin BuildStepList Mac OS X
				Begin BuildProjectStep Build
				End
				Begin SignProjectStep Sign
				  DeveloperID=
				End
			End
			Begin BuildStepList Windows
				Begin BuildProjectStep Build
				End
			End
#tag EndBuildAutomation

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer.xojo_code}
```xojo
#tag Module
Protected Module fsdServer
	#tag Method, Flags = &h0
		Sub AddFile(ParamArray args() As Variant)
		  System.DebugLog("AddFile Not yet implemented")
		  // Implementation here
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function BreakArgs(args As String, parts() As String, maxParts As Integer) As Integer
		  // Implementation here
		  System.DebugLog("BreakArgs Not yet implemented")
		  
		  Return 0
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function BreakPacket(packet As String, parts() As String, optional maxParts As Integer = -1) As Integer
		  // Implementation here
		  System.DebugLog("BreakPacket Not yet implemented")
		  
		  Return 0
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function CatArgs(args() As String, count As Integer, separator As String) As String
		  // Implementation here
		  System.DebugLog("CatArgs Not yet implemented")
		  
		  Return ""
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function CatCommand(s() As String, n As Integer, buf As String) As String
		  buf=""
		  For x As Integer = 0 To n - 1
		    If x > 0 Then
		      buf = buf + ":"
		    End If
		    buf = buf + s(x)
		  Next
		  Return buf
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function clcmdnames(c as CL) As String
		  Select Case c
		  Case cl.ADDATC
		    return "#AA"
		  Case cl.RMATC
		    return "#DA"
		  Case cl.ADDPILOT
		    return "#AP"
		  Case cl.RMPILOT
		    return "#DP"
		  Case cl.REQHANDOFF
		    return "$HO"
		  Case cl.MESSAGE
		    return "#TM"
		  Case cl.REQWEATHER
		    return "#RW"
		  Case cl.PILOTPOS
		    return "@"
		  Case cl.ATCPOS
		    return "%"
		  Case cl.ping
		    return "$PI"
		  Case cl.pong
		    return "$PO"
		  Case cl.ACHANDOFF
		    return "$HA"
		  Case cl.PLAN
		    return "$FP"
		  Case cl.SB
		    return "#SB"
		  Case cl.PC
		    return "#PC"
		  Case cl.WEATHER
		    return "#WX"
		  Case cl.CLOUDDATA
		    return "#CD"
		  case cl.WINDDATA
		    return "#WD"
		  case cl.TEMPDATA
		    return "#TD"
		  case cl.REQCOM
		    return "$C?"
		  case cl.REPCOM
		    return "$CI"
		  case cl.REQACARS
		    return "$AX"
		  case cl.REPACARS
		    return "$AR"
		  case cl.ERROR
		    return "$ER"
		  case cl.CQ
		    return "$CQ"
		  case cl.CR
		    return "$CR"
		  case cl.KILL
		    return "$!!"
		  case cl.WDELTA
		    return "#DL"
		  else
		    return ""
		  End Select
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ConfigGets(s As String, size As Integer) As String
		  // Implementation here
		  System.DebugLog("ConfigGets Not yet implemented")
		  
		  Return ""
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub DBLog(msg As String, level As Integer)
		  // Implementation here
		  System.DebugLog("DBLog Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function dist(lat1 as double, lon1 as double, lat2 as double, lon2 as double) As double
		  Dim dist, dlon as double
		  dlon = lon2-lon1
		  lat1 = lat1 * M_PI/180.0
		  lat2 = lat2 * M_PI/180.0
		  dlon=dlon*M_PI/180.0
		  dist=(sin(lat1)*sin(lat2))+(cos(lat1)*cos(lat2)*cos(dlon))
		  if dist >1.0 then
		    dist=1.0
		  end
		  dist = ACos(dist)*60*180/M_PI
		  return dist
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub DoLog(level As Integer, ParamArray args() As Variant)
		  // Implementation here
		  System.DebugLog("DoLog Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function errstr(num as integer) As string
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub FindHostname(ip As UInt32, hostname As String)
		  // Implementation here
		  
		  System.DebugLog("FindHostname Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function FindItem(what As String, buf As String) As Integer
		  // Implementation here
		  System.DebugLog("FindItem Not yet implemented")
		  
		  Return 0
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function findsection(section as String) As integer
		  System.DebugLog("FindSection Not yet implemented")
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getCert(name as string) As Certificate
		  for each c as certificate in Certificates
		    if c.cid = name then
		      return c
		    end
		  next
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getClient(ident as string) As client
		  for each cl as client in clients
		    if cl.callsign = ident then
		      return cl
		    end
		  next
		  return nil
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GetClientByCallsign(cs as string) As Client
		  //ToDo implement
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getServer(s as String) As Server
		  for each sv as server in servers
		    if sv.ident = s then
		      return sv
		    end
		  next
		  return nil
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getwprofile(name as String) As wprofile
		  for each wp as wprofile in wProf
		    if wp.Name = name then return wp
		  next
		  return nil
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Initilize()
		  configman = new configmanager
		  
		  certLevels.add("SUSPENDED")
		  certLevels.add("OBSPILOT")
		  certLevels.add("STUDENT1")
		  certLevels.add("STUDENT2")
		  certLevels.add("STUDENT3")
		  certLevels.add("CONTROLLER1")
		  certLevels.add("CONTROLLER2")
		  certLevels.add("CONTROLLER3")
		  certLevels.add("INSTRUCTOR1")
		  certLevels.add("INSTRUCTOR2")
		  certLevels.add("INSTRUCTOR3")
		  certLevels.add("SUPERVIOSR")
		  certLevels.add("ADMINISTRATOR")
		  
		  cmdNames.add("NOTIFY")
		  cmdnames.add("REQMETAR")
		  cmdnames.add("PING")
		  cmdnames.add("PONG")
		  cmdnames.add("SYNC")
		  cmdnames.add("LINKDOWN")
		  cmdnames.add("NOWX")
		  cmdnames.add("ADDCLIENT")
		  cmdnames.add("RMCLIENT")
		  cmdnames.add("PLAN")
		  cmdnames.add("PD")
		  cmdnames.add("AD")
		  cmdnames.add("ADDCERT")
		  cmdnames.add("MC")
		  cmdnames.add("WX")
		  cmdnames.add("METAR")
		  cmdnames.add("AWPROF")
		  cmdnames.add("DWPROF")
		  cmdnames.add("KILL")
		  cmdnames.add("RESET")
		  
		  silentok.Add(true) // Notify
		  silentok.Add(true) // ReqMetar
		  silentok.Add(true) // Ping
		  silentok.Add(true) // Pong
		  silentok.Add(true) // Sync
		  silentok.Add(true) // LinkDown
		  silentok.Add(true) // NoWx
		  silentok.Add(true) // AddClient
		  silentok.Add(true) // RmClient
		  silentok.Add(true) // Plan
		  silentok.Add(false) // PD
		  silentok.Add(false) // AD
		  silentok.Add(true) // AddCert
		  silentok.Add(false) // MC
		  silentok.Add(true) // WX
		  silentok.Add(true) // Metar
		  silentok.Add(true) // Add W Profile
		  silentok.Add(true) // Del W Profile
		  silentok.Add(true) // Kill Client
		  silentok.Add(true) // Reset
		  silentok.Add(false) // End
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function IsSpace(c as String) As Boolean
		  Return c = " " Or c = Chr(9) Or c = Chr(10) Or c = Chr(13)
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function MConnect(sock As Integer, addr As MemoryBlock, addrlen As Integer, timeout As Integer) As Integer
		  // Implementation here
		  System.DebugLog("mconnect Not yet implemented")
		  
		  Return 0
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function MGMTTime() As Integer
		  // Implementation here
		  System.DebugLog("mgmttime Not yet implemented")
		  
		  Return -1
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function MRand() As Integer
		  // Implementation here
		  System.DebugLog("mrand Not yet implemented")
		  
		  Return 0
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function MRound(value As Double) As Integer
		  // Implementation here
		  System.DebugLog("mround Not yet implemented")
		  
		  Return 0
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function MTime() As Integer
		  //ToDo implement ntime
		  return datetime.now.SecondsFrom1970
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function PadLeft(input As String, totalLength As Integer, padChar As String = " ") As String
		  If input.Length >= totalLength Then
		    Return input
		  Else
		    Dim o as string =""
		    for i as integer = 0 to totalLength - input.Length
		      o=o+padChar
		    next
		    o=o+input
		    Return o
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function PrintLoc(lat As Double, lon As Double, loc As String) As String
		  // Implementation here
		  System.DebugLog("printloc Not yet implemented")
		  
		  Return ""
		End Function
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Function Repeat(s as String, repeatCount as Integer) As String
		  // Concatenate a string to itself 'repeatCount' times.
		  // Example: Repeat("spam ", 5) = "spam spam spam spam spam ".
		  
		  #pragma disablebackgroundTasks
		  
		  if repeatCount <= 0 then return ""
		  if repeatCount = 1 then return s
		  
		  // Implementation note: normally, you don't want to use string concatenation
		  // for something like this, since that creates a new string on each operation.
		  // But in this case, we can double the size of the string on iteration, which
		  // quickly reduces the overhead of concatenation to insignificance.  This method
		  // is faster than any other we've found (short of declares, which were only
		  // about 2X faster and were quite platform-specific).
		  
		  Var desiredLenB As Integer = s.Bytes * repeatCount
		  Var output as String = s
		  Var cutoff as Integer = (desiredLenB+1)\2
		  Var curLenB as Integer = output.Bytes
		  
		  while curLenB < cutoff
		    output = output + output
		    curLenB = curLenB + curLenB
		  wend
		  
		  output = output + output.LeftBytes( desiredLenB - curLenB) 
		  return output
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setconfigfile(name as string)
		  System.DebugLog("setconfigfile Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub SnapPacket(packet As String, snap As String, size As Integer)
		  // Implementation here
		  System.DebugLog("snappacket Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SprintDate(now As Integer, buf As String) As String
		  // Implementation here
		  System.DebugLog("sprintdate Not yet implemented")
		  
		  Return ""
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function sprintf(src as string, ParamArray data as Variant) As string
		  // Returns a string produced according to the formatting string <src>.
		  // The format string <src> is composed of zero or more directives: ordinary
		  // characters (excluding %) that are
		  // copied directly to the result, and conversion
		  // specifications, each of which results in fetching its
		  // own parameter.
		  // For details, see http://de.php.net/manual/en/function.sprintf.php
		  
		  // Attention: This function differs from the PHP sprintf() function in that
		  // it formats floating numbers according to the locale settings.
		  // For example, in Germany,
		  //    sprintf("%04.2f", 123.45)
		  // will return "0123,45".
		  
		  // Written by Frank Bitterlich, bitterlich@gsco.de
		  // Additional work by Florent Pillet, florent@florentpillet.com
		  
		  // NOTE: This method is currently available only to GUI apps due
		  // to <http://www.realsoftware.com/feedback/viewreport.php?reportid=owsxeqnf>.
		  // Once that bug is fixed, we can make this available to console apps too.
		  
		  Var rex as new RegEx
		  Var match as RegExMatch
		  Var argtype, padding, alignment, precstr, replacement, frmstr, s as string
		  Var p, width, precision, index, start, length as integer
		  Var vf as double
		  Var datum As Variant
		  
		  rex.SearchPattern = "(%)(0|/s|'.)?(-)?(\d*)(\.\d+)?([%bcdeufosxX])"
		  rex.Options.Greedy = true
		  match = rex.Search(src)
		  index = -1
		  
		  do until match = nil
		    if match.SubExpressionCount = 7 then
		      Var interim as string = " " + match.SubExpressionString(2)
		      padding = interim.Right(1)
		      // if padding = "" then padding = " " // default: space
		      alignment = match.SubExpressionString(3)
		      width = Val(match.SubExpressionString(4))
		      precstr = match.SubExpressionString(5).middle( 2)
		      precision = Val(precstr)
		      if precstr="" then precision = 6
		      
		      argtype = match.SubExpressionString(6)
		      if argtype <> "%" then
		        index = index + 1
		        if index > data.LastIndex then
		          datum = 0
		        else
		          datum = data(index)
		        end if
		      end if
		      
		      select case argtype
		      case "%"
		        replacement = "%"
		        
		      case "b" // binary int
		        replacement = bin(datum)
		        
		      case "c" // character
		        replacement = Encodings.UTF8.Chr(datum)
		        width = 0
		        
		      case "d" // signed int
		        if padding = "0" then
		          frmstr = "-"+Repeat("0", width)
		          if datum<0 then frmstr = frmstr.Left( frmstr.Length-1) 
		        else
		          frmstr = "-#"
		        end if
		        replacement = Format(datum, frmstr)
		        
		      case "e" // scientific notation
		        vf = datum
		        frmstr = "-#."+Repeat("0", precision)+"e+"
		        Replacement = Format(vf, frmstr)
		        p = Replacement.IndexOf("e")
		        // Make sure the part after the "e" has two digits
		        Replacement = Replacement.left(p) + Format(Val(Replacement.middle( p+1)), "+00")
		        
		      case "u" // unsigned int
		        replacement = Format(datum, "#")
		        
		      case "f" // signed float
		        if padding = "0" then
		          frmstr = "-"+Repeat("0", width)
		          if datum<0 then frmstr = frmstr.left( frmstr.length-1)
		        else
		          frmstr = "-#"
		        end if
		        if precision > 0 then
		          frmstr = frmstr + "." + Repeat("0", precision)
		        end if
		        Replacement = Format(datum, frmstr)
		        if precision > 0 and padding<>"0" then width = width + precision + 1
		        
		      case "o" // octal int
		        replacement = Oct(datum)
		        
		      case "s" // string
		        replacement = datum
		        
		      case "x" // hex int; uppercase "X" means uppercase hex, "x" is lowercase hex
		        replacement = hex(datum)
		        if asc(argtype) = &h58 then // uppercase "X"
		          replacement = replacement.Uppercase
		        else // lowercase "x"
		          replacement = replacement.Lowercase
		        end if
		      end select
		      
		      if width>replacement.Length then
		        if alignment="-" then // align left
		          replacement=replacement+Repeat(padding, width-replacement.length)
		        else // align right
		          replacement=Repeat(padding, width-replacement.length)+replacement
		        end if
		      end if
		    end if
		    start = match.SubExpressionStartB(0)
		    length = match.SubExpressionString(0).Bytes
		    
		    s = src.LeftBytes( start) + replacement
		    src = s + src.MiddleBytes(start+length)
		    
		    match = rex.Search(src, s.Bytes)
		  loop
		  
		  return src
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SprintGMT(now As Integer, buf As String) As String
		  // Implementation here
		  System.DebugLog("sprintgmt Not yet implemented")
		  
		  Return ""
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SprintGMTDate(now As Integer, buf As String) As String
		  // Implementation here
		  System.DebugLog("sprintgmtdate Not yet implemented")
		  
		  Return ""
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SprintTime(now As Integer, buf As String) As String
		  // Implementation here
		  System.DebugLog("sprinttime Not yet implemented")
		  
		  Return ""
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub StartTimer()
		  // Implementation here
		  System.DebugLog("starttimer Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function strpbrk(source as string, check as string) As Boolean
		  for i as integer = 0 to check.Length -1
		    Dim ch as string = check.Middle(i,1)
		    if source.Contains(ch) then
		      return true
		    end
		  next
		  return false
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function StrUpr(s As String) As String
		  // Implementation here
		  //System.DebugLog("strupr Not yet implemented")
		  Return s.Uppercase
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function svcmdnames(c as fsdServer.CMD) As String
		  Select Case c
		  Case cmd.NOTIFY
		    Return "NOTIFY"
		  Case cmd.REQMETAR
		    Return "REQMETAR"
		  case cmd.PING
		    Return "PING"
		  case cmd.PONG
		    Return "PONG"
		  case cmd.SYNC
		    Return "SYNC"
		  case cmd.LINKDOWN
		    Return "LINKDOWN"
		  Case cmd.NOWX
		    Return "NOWX"
		  Case cmd.ADDCLIENT
		    Return "ADDCLIENT"
		  Case cmd.RMCLIENT
		    Return "RMCLIENT"
		  Case CMD.PLAN
		    Return "PLAN"
		  Case CMD.PD //Pilot Data
		    Return "PD"
		  Case cmd.AD //ATC Data
		    Return "AD"
		  Case cmd.CERT
		    Return "ADDCERT"
		  Case cmd.MULTIC
		    Return "MC"
		  Case cmd.WEATHER
		    Return "WX"
		  Case cmd.METAR
		    Return "METAR"
		  Case cmd.ADDWPROF
		    Return "AWPROF"
		  Case cmd.DELWPROF
		    Return "DWPROF"
		  Case cmd.KILL
		    Return "KILL"
		  Case cmd.RESET
		    Return "RESET"
		  else
		    return ""
		  End Select
		  
		End Function
	#tag EndMethod


	#tag Note, Name = Untitled2
		
		
	#tag EndNote


	#tag Property, Flags = &h0
		Certificates() As certificate
	#tag EndProperty

	#tag Property, Flags = &h0
		#tag Note
			
			d
		#tag EndNote
		certLevels() As String
	#tag EndProperty

	#tag Property, Flags = &h0
		clientinterface As clinterface
	#tag EndProperty

	#tag Property, Flags = &h1
		Protected clients() As client
	#tag EndProperty

	#tag Property, Flags = &h0
		cmdnames() As String
	#tag EndProperty

	#tag Property, Flags = &h0
		configman As configmanager
	#tag EndProperty

	#tag Property, Flags = &h0
		errors() As String
	#tag EndProperty

	#tag Property, Flags = &h0
		logp As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		manager As manage
	#tag EndProperty

	#tag Property, Flags = &h0
		maxcl As Integer = 27
	#tag EndProperty

	#tag Property, Flags = &h0
		maxLevel As Integer = 12
	#tag EndProperty

	#tag Property, Flags = &h0
		MetarManager As MM
	#tag EndProperty

	#tag Property, Flags = &h0
		myserver As Server
	#tag EndProperty

	#tag Property, Flags = &h0
		nerrors As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		processes() As process
	#tag EndProperty

	#tag Property, Flags = &h0
		serverinterface As servinterface
	#tag EndProperty

	#tag Property, Flags = &h0
		servers() As Server
	#tag EndProperty

	#tag Property, Flags = &h0
		ServUsers() As ServUser
	#tag EndProperty

	#tag Property, Flags = &h0
		silentok() As Boolean
	#tag EndProperty

	#tag Property, Flags = &h0
		systeminterface As sysinterface
	#tag EndProperty

	#tag Property, Flags = &h0
		Untitled1 As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		users() As absuser
	#tag EndProperty

	#tag Property, Flags = &h0
		Version As String = "V3.000 d9 Xojo"
	#tag EndProperty

	#tag Property, Flags = &h0
		wProf() As wprofile
	#tag EndProperty


	#tag Constant, Name = ATT_DATE, Type = Double, Dynamic = False, Default = \"6", Scope = Public
	#tag EndConstant

	#tag Constant, Name = ATT_INT, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = ATT_VARCHAR, Type = Double, Dynamic = False, Default = \"5", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CALLSIGNBYTES, Type = Double, Dynamic = False, Default = \"12", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CERTFILECHECK, Type = Double, Dynamic = False, Default = \"120", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CERT_ADD, Type = Double, Dynamic = False, Default = \"0", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CERT_DELETE, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CERT_MODIFY, Type = Double, Dynamic = False, Default = \"2", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CLIENTTIMEOUT, Type = Double, Dynamic = False, Default = \"800", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CLIENT_ALL, Type = Double, Dynamic = False, Default = \"3", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CLIENT_ATC, Type = Double, Dynamic = False, Default = \"2", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CLIENT_PILOT, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CONFIGINTERVAL, Type = Double, Dynamic = False, Default = \"10", Scope = Public
	#tag EndConstant

	#tag Constant, Name = CONNECTDELAY, Type = Double, Dynamic = False, Default = \"20", Scope = Public
	#tag EndConstant

	#tag Constant, Name = FEED_BOTH, Type = Double, Dynamic = False, Default = \"3", Scope = Public
	#tag EndConstant

	#tag Constant, Name = FEED_IN, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = FEED_OUT, Type = Double, Dynamic = False, Default = \"2", Scope = Public
	#tag EndConstant

	#tag Constant, Name = GUARDRETRY, Type = Double, Dynamic = False, Default = \"120", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LAGCHECK, Type = Double, Dynamic = False, Default = \"60", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_ADMINISTRATOR, Type = Double, Dynamic = False, Default = \"12", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_CONTROLLER1, Type = Double, Dynamic = False, Default = \"5", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_CONTROLLER2, Type = Double, Dynamic = False, Default = \"6", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_CONTROLLER3, Type = Double, Dynamic = False, Default = \"7", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_INSTRUCTOR1, Type = Double, Dynamic = False, Default = \"8", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_INSTRUCTOR2, Type = Double, Dynamic = False, Default = \"9", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_INSTRUCTOR3, Type = Double, Dynamic = False, Default = \"10", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_MAX, Type = Double, Dynamic = False, Default = \"12", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_OBSPILOT, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_STUDENT1, Type = Double, Dynamic = False, Default = \"2", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_STUDENT2, Type = Double, Dynamic = False, Default = \"3", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_STUDENT3, Type = Double, Dynamic = False, Default = \"4", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_SUPERVISOR, Type = Double, Dynamic = False, Default = \"11", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LEV_SUSPENDED, Type = Double, Dynamic = False, Default = \"0", Scope = Public
	#tag EndConstant

	#tag Constant, Name = LOGFILE, Type = String, Dynamic = False, Default = \"log.txt", Scope = Public
	#tag EndConstant

	#tag Constant, Name = L_ALERT, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = L_CRIT, Type = Double, Dynamic = False, Default = \"2", Scope = Public
	#tag EndConstant

	#tag Constant, Name = L_DEBUG, Type = Double, Dynamic = False, Default = \"6", Scope = Public
	#tag EndConstant

	#tag Constant, Name = L_EMERG, Type = Double, Dynamic = False, Default = \"0", Scope = Public
	#tag EndConstant

	#tag Constant, Name = L_ERR, Type = Double, Dynamic = False, Default = \"3", Scope = Public
	#tag EndConstant

	#tag Constant, Name = L_INFO, Type = Double, Dynamic = False, Default = \"5", Scope = Public
	#tag EndConstant

	#tag Constant, Name = L_MAX, Type = Double, Dynamic = False, Default = \"7", Scope = Public
	#tag EndConstant

	#tag Constant, Name = L_WARNING, Type = Double, Dynamic = False, Default = \"4", Scope = Public
	#tag EndConstant

	#tag Constant, Name = MAXHOPS, Type = Double, Dynamic = False, Default = \"10", Scope = Public
	#tag EndConstant

	#tag Constant, Name = MAXLINELENGTH, Type = Double, Dynamic = False, Default = \"512", Scope = Public
	#tag EndConstant

	#tag Constant, Name = MAXMETARDOWNLOADTIME, Type = Double, Dynamic = False, Default = \"900", Scope = Public
	#tag EndConstant

	#tag Constant, Name = METARFILE, Type = String, Dynamic = False, Default = \"metar.txt", Scope = Public
	#tag EndConstant

	#tag Constant, Name = METARFILENEW, Type = String, Dynamic = False, Default = \"metarnew.txt", Scope = Public
	#tag EndConstant

	#tag Constant, Name = M_PI, Type = Double, Dynamic = False, Default = \"3.14159265", Scope = Public
	#tag EndConstant

	#tag Constant, Name = NEEDREVISION, Type = Double, Dynamic = False, Default = \"9", Scope = Public
	#tag EndConstant

	#tag Constant, Name = NOTIFYCHECK, Type = Double, Dynamic = False, Default = \"300", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PATH_FSD_CONF, Type = String, Dynamic = False, Default = \"fsd.conf", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PATH_FSD_HELP, Type = String, Dynamic = False, Default = \"help.txt", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PATH_FSD_MOTD, Type = String, Dynamic = False, Default = \"motd.txt", Scope = Public
	#tag EndConstant

	#tag Constant, Name = PRODUCT, Type = String, Dynamic = False, Default = \"FSFDT Xojo Rewrite from FSD V3.000 draft 9", Scope = Public
	#tag EndConstant

	#tag Constant, Name = SERVERMAXTOOK, Type = Double, Dynamic = False, Default = \"240", Scope = Public
	#tag EndConstant

	#tag Constant, Name = SERVERTIMEOUT, Type = Double, Dynamic = False, Default = \"800", Scope = Public
	#tag EndConstant

	#tag Constant, Name = SERVER_METAR, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = SERVER_SILENT, Type = Double, Dynamic = False, Default = \"2", Scope = Public
	#tag EndConstant

	#tag Constant, Name = SILENTCLIENTTIMEOUT, Type = Double, Dynamic = False, Default = \"36000", Scope = Public
	#tag EndConstant

	#tag Constant, Name = SYNCTIMEOUT, Type = Double, Dynamic = False, Default = \"120", Scope = Public
	#tag EndConstant

	#tag Constant, Name = Untitled, Type = , Dynamic = False, Default = \"", Scope = Public
	#tag EndConstant

	#tag Constant, Name = USERFEEDCHECK, Type = Double, Dynamic = False, Default = \"3", Scope = Public
	#tag EndConstant

	#tag Constant, Name = USERPINGTIMEOUT, Type = Double, Dynamic = False, Default = \"200", Scope = Public
	#tag EndConstant

	#tag Constant, Name = USERTIMEOUT, Type = Double, Dynamic = False, Default = \"500", Scope = Public
	#tag EndConstant

	#tag Constant, Name = VAR_AMOUNT, Type = Double, Dynamic = False, Default = \"10", Scope = Public
	#tag EndConstant

	#tag Constant, Name = WHAZZUPCHECK, Type = Double, Dynamic = False, Default = \"30", Scope = Public
	#tag EndConstant

	#tag Constant, Name = WINDDELTATIMEOUT, Type = Double, Dynamic = False, Default = \"70", Scope = Public
	#tag EndConstant


	#tag Structure, Name = cloudlayer, Flags = &h0
		ceiling as integer
		  floor as integer
		  icing as integer
		  turbulence as integer
		coverage as integer
	#tag EndStructure

	#tag Structure, Name = loghis, Flags = &h0
		msg as string * 100
		level as integer
	#tag EndStructure

	#tag Structure, Name = mmq, Flags = &h0
		Destination as string *20
		  metarid as string * 10
		  fd as integer
		parsed as boolean
	#tag EndStructure

	#tag Structure, Name = station, Flags = &h0
		name as string * 10
		location as integer
	#tag EndStructure

	#tag Structure, Name = templayer, Flags = &h0
		ceiling as integer
		temp as integer
	#tag EndStructure

	#tag Structure, Name = windlayer, Flags = &h0
		ceiling as integer
		  floor as integer
		  direction as integer
		  speed as integer
		  gusting as integer
		turbulence as integer
	#tag EndStructure


	#tag Enum, Name = CL, Type = Integer, Flags = &h0
		ADDATC
		  RMATC
		  ADDPILOT
		  RMPILOT
		  REQHANDOFF
		  MESSAGE
		  REQWEATHER
		  PILOTPOS
		  ATCPOS
		  PING
		  PONG
		  ACHANDOFF
		  PLAN
		  SB
		  PC
		  WEATHER
		  CLOUDDATA
		  WINDDATA
		  TEMPDATA
		  REQCOM
		  REPCOM
		  REQACARS
		  REPACARS
		  ERROR
		  CQ
		  CR
		  KILL
		  WDELTA
		UNOWN=-1
	#tag EndEnum

	#tag Enum, Name = CMD, Type = Integer, Flags = &h0
		NOTIFY
		  REQMETAR
		  PING
		  PONG
		  SYNC
		  LINKDOWN
		  NOWX
		  ADDCLIENT
		  RMCLIENT
		  PLAN
		  PD
		  AD
		  CERT
		  MULTIC
		  WEATHER
		  METAR
		  ADDWPROF
		  DELWPROF
		  KILL
		RESET
	#tag EndEnum

	#tag Enum, Name = ERR, Type = Integer, Flags = &h0
		OK
		  CSINUSE
		  CSINVALID
		  REGISTERED
		  SYNTAX
		  SRCINVALID
		  CIDINVALID
		  NOSUCHCS
		  NOFP
		  NOWEATHER
		  REVISION
		  LEVEL
		  SERVFULL
		CSSUSPEND
	#tag EndEnum

	#tag Enum, Name = KILL, Type = Integer, Flags = &h0
		NONE
		  COMMAND
		  FLOOD
		  INITTIMEOUT
		  DATATIMEOUT
		  CLOSED
		  WRITEERR
		  KILL
		PROTOCOL
	#tag EndEnum

	#tag Enum, Name = SOURCE, Type = Integer, Flags = &h0
		SOURCE_NETWORK
		  SOURCE_FILE
		SOURCE_DOWNLOAD
	#tag EndEnum


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="nerrors"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="logp"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="maxLevel"
			Visible=false
			Group="Behavior"
			InitialValue="12"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="maxcl"
			Visible=false
			Group="Behavior"
			InitialValue="27"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Untitled1"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Version"
			Visible=false
			Group="Behavior"
			InitialValue="V3.000 d9 Xojo"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
	#tag EndViewBehavior
End Module
#tag EndModule

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\allowstruct.xojo_code}
```xojo
#tag Class
Protected Class allowstruct
	#tag Property, Flags = &h0
		ip As string
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="ip"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="string"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\certificate.xojo_code}
```xojo
#tag Class
Protected Class certificate
	#tag Method, Flags = &h0
		Sub configure(pwd as string, l as integer, c as Integer, o as string)
		  level=l
		  password=StrUpr(pwd)
		  origin=StrUpr(o)
		  creationTime=c
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(cid as string, password as string, level as integer, creationTime as Integer, origin as string)
		  self.cid = cid
		  self.password = password
		  self.level = level
		  if self.level > maxLevel then
		    self.Level = maxLevel
		  end
		  self.creationTime = creationTime
		  self.origin = origin
		  prevVisit = -1
		  Certificates.Add(self)
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		cid As String
	#tag EndProperty

	#tag Property, Flags = &h0
		creationTime As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		level As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		liveCheck As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		origin As String
	#tag EndProperty

	#tag Property, Flags = &h0
		password As String
	#tag EndProperty

	#tag Property, Flags = &h0
		prevVisit As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="cid"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="level"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="liveCheck"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="origin"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="password"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="creationTime"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevVisit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\client.xojo_code}
```xojo
#tag Class
Protected Class client
	#tag Method, Flags = &h0
		Sub Constructor(i as string, where as server, cs as string, t as integer, reqrating as integer, rev as string, real as string, st as integer)
		  //ToDo add functionality
		  location = where
		  cid = StrUpr(i)
		  type = t
		  callsign = StrUpr(cs)
		  protocol = StrUpr(rev)
		  sector = ""
		  identflag = ""
		  facilitytype = 0
		  rating = reqrating
		  visualrange = 40
		  plan = nil
		  positionok = 0
		  altitude = 0
		  simtype = st
		  realname = StrUpr(real)
		  starttime = MTime()
		  alive = starttime
		  frequency = 0
		  transponder = 0
		  groundspeed=0
		  lat = 0
		  lon = 0 
		  
		  
		  clients.Add(self)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function distance(other as client) As double
		  if other = nil then
		    return -1 
		  end
		  if positionok = -1 or other.positionok = -1 then
		    return -1
		  end
		  return dist(lat,lon,other.lat,other.lon)
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getrange() As Integer
		  if type=1 then //if client is pilot
		    if altitude<0 then
		      altitude = 0
		      Dim rv as double
		      Dim dalt as double = altitude
		      rv = (10+1.414*sqrt(altitude))
		      return Floor(rv)
		    end
		  end
		  Select case facilitytype
		  Case 0
		    return 40
		  Case 1
		    return 1500
		  Case 2
		    return 5
		  Case 3
		    return 5
		  Case 4
		    return 30
		  Case 5
		    return 100
		  case 6
		    return 400
		  Case 6
		    return 1500
		  Else
		    return 40
		    
		  End Select
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub handlefp(data() as String)
		  dim revision as integer
		  if plan<> nil then
		    revision = plan.revision + 1
		  else
		    revision = 0
		  end
		  plan = new flightplan(callsign,data(0),data(1),data(2).ToInteger, data(3), data(4).ToInteger, data(5).ToInteger,data(6),data(7),data(8).ToInteger,data(9).ToInteger,data(10).ToInteger,data(11).ToInteger,data(12),data(13),data(14))
		  plan.revision = revision
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setalive()
		  alive=MTime()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub updateatc(data() as string)
		  Dim newfreq as integer = data(0).ToInteger
		  frequency = newfreq
		  facilitytype = data(1).ToInteger
		  visualrange = data(2).ToInteger
		  lat = data(4).ToDouble
		  lon = data(5).ToDouble
		  altitude = data(6).ToDouble
		  setalive()
		  positionok = 1
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub updatepilot(data() as string)
		  Dim a,b,c,x,y,z as UInteger
		  transponder = data(2).ToInteger
		  identflag=StrUpr(data(0))
		  lat=data(4).ToDouble
		  lon=data(5).ToDouble
		  altitude = data(6).ToInteger
		  groundspeed = data(7).ToInteger
		  pbh = data(8).ToInteger
		  x = Bitwise.ShiftRight(Bitwise.BitAnd(pbh, &hFF800000), 22)
		  y = Bitwise.ShiftRight(Bitwise.BitAnd(pbh, &h003FF000), 12)
		  z = Bitwise.ShiftRight(Bitwise.BitAnd(pbh, &h00000FFC), 2)
		  flags = data(9).ToInteger
		  setalive
		  positionok = 1
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		alive As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		altitude As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		callsign As String
	#tag EndProperty

	#tag Property, Flags = &h0
		cid As String
	#tag EndProperty

	#tag Property, Flags = &h0
		facilitytype As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		flags As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		frequency As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		groundspeed As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		identflag As String
	#tag EndProperty

	#tag Property, Flags = &h0
		lat As Double
	#tag EndProperty

	#tag Property, Flags = &h0
		location As Server
	#tag EndProperty

	#tag Property, Flags = &h0
		lon As Double
	#tag EndProperty

	#tag Property, Flags = &h0
		pbh As UInteger
	#tag EndProperty

	#tag Property, Flags = &h0
		plan As flightplan
	#tag EndProperty

	#tag Property, Flags = &h0
		positionok As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		protocol As String
	#tag EndProperty

	#tag Property, Flags = &h0
		rating As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		realname As String
	#tag EndProperty

	#tag Property, Flags = &h0
		sector As String
	#tag EndProperty

	#tag Property, Flags = &h0
		simtype As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		starttime As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		transponder As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		type As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		visualrange As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="altitude"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="callsign"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="cid"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="facilitytype"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="flags"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="frequency"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="groundspeed"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="identflag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="lat"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Double"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lon"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Double"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="pbh"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="UInteger"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="positionok"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="protocol"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="rating"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="realname"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="sector"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="simtype"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="transponder"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="type"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="visualrange"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="alive"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="starttime"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\configentry.xojo_code}
```xojo
#tag Class
Protected Class configentry
	#tag Method, Flags = &h0
		Sub Constructor(v as string, d as string)
		  vari = v
		  data = d
		  changed =1
		  Dim s() as string
		  parts = s
		  partbuf = ""
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub fillparts()
		  nparts = 0
		  Dim s() as string
		  parts = s
		  partbuf = data
		  
		  Dim p As String = partbuf
		  While p <> ""
		    Dim endPos As Integer = InStr(p, ",")
		    If endPos > 0 Then
		      Dim seek As Integer = endPos - 1
		      p = p.Left(endPos - 1) + p.Mid(endPos + 1)
		      While seek > 0 And IsSpace(p.Mid(seek, 1))
		        seek = seek - 1
		      Wend
		      p = p.Left(seek + 1)
		    End If
		    
		    While p <> "" And IsSpace(p.Left(1))
		      p = p.Mid(2)
		    Wend
		    
		    If parts = Nil Then
		      Dim s2() as string
		      parts = s2
		    End If
		    parts.Append(p)
		    nparts = nparts + 1
		    
		    If endPos > 0 Then
		      p = p.Mid(endPos + 1)
		    Else
		      p = ""
		    End If
		  Wend
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getdata() As string
		  return data
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getint() As integer
		  return data.ToInteger
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getnparts() As integer
		  if parts.LastIndex = -1 then fillparts
		  return nparts
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getpart(num as integer) As String
		  If parts.Ubound = -1 Then
		    fillparts()
		  End If
		  If num >= nparts Then
		    Return ""
		  End If
		  Return parts(num)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function inlist(entry as string) As integer
		  if parts.LastIndex = 1 then fillparts()
		  for x as integer = 0 to nparts
		    if parts(x).Uppercase = entry.Uppercase then return 1
		  next
		  return 0
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setdata(d as string)
		  //ToDo Add Functionality
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		changed As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		data As String
	#tag EndProperty

	#tag Property, Flags = &h0
		nparts As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		partbuf As String
	#tag EndProperty

	#tag Property, Flags = &h0
		parts() As String
	#tag EndProperty

	#tag Property, Flags = &h0
		vari As String
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="vari"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="data"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="partbuf"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="changed"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="nparts"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\configgroup.xojo_code}
```xojo
#tag Class
Protected Class configgroup
	#tag Method, Flags = &h0
		Sub Constructor(n as string)
		  name = n.Uppercase
		  nentries = 0 
		  changed = 1
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function createentry(vari as string, data as String) As configentry
		  entries.add(new configentry(vari, data))
		  
		  return entries(entries.LastIndex)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getentry(name as string) As configentry
		  for each ce as configentry in entries
		    if ce.vari = name then
		      return ce
		    end
		  next
		  return nil
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub handleentry(vari as string, data as string)
		  Dim e as configentry = getentry(vari)
		  if e = nil then
		    Dim ce as configentry = createentry(vari,data)
		    changed = 1
		    return
		  end
		  if data = e.data then return
		  e.setdata(data)
		  changed = 1
		  return
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		changed As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		entries() As configentry
	#tag EndProperty

	#tag Property, Flags = &h0
		name As string
	#tag EndProperty

	#tag Property, Flags = &h0
		nentries As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="name"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="nentries"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="changed"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\flightplan.xojo_code}
```xojo
#tag Class
Protected Class flightplan
	#tag Method, Flags = &h0
		Sub Constructor(cs as string, type as string, aircraft as string, tascruise as integer, depairport as string, deptime as Integer, actdeptime as integer, alt as string, destairport as string, hrsenroute as integer, minenroute as integer, hrsfuel as integer, minfuel as integer, altairport as string, remarks as string, route as string)
		  self.callsign = cs
		  self.type = type
		  self.tascruise = tascruise
		  self.depairport = depairport
		  self.deptime = deptime
		  self.actualdeptime = actdeptime
		  self.alt = alt
		  self.destairport = destairport
		  self.hrsenroute = hrsenroute
		  self.minenroute = minenroute
		  self.hrsfuel = hrsfuel
		  self.minfuel = minfuel
		  self.remarks = remarks
		  self.route = route
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		actualdeptime As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		aircraft As String
	#tag EndProperty

	#tag Property, Flags = &h0
		alt As String
	#tag EndProperty

	#tag Property, Flags = &h0
		altairport As String
	#tag EndProperty

	#tag Property, Flags = &h0
		callsign As String
	#tag EndProperty

	#tag Property, Flags = &h0
		depairport As String
	#tag EndProperty

	#tag Property, Flags = &h0
		deptime As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		destairport As String
	#tag EndProperty

	#tag Property, Flags = &h0
		hrsenroute As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		hrsfuel As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		minenroute As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		minfuel As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		remarks As String
	#tag EndProperty

	#tag Property, Flags = &h0
		revision As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		route As String
	#tag EndProperty

	#tag Property, Flags = &h0
		tascruise As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		type As String
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="callsign"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="actualdeptime"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="aircraft"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="alt"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="altairport"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="depairport"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="deptime"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="destairport"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="hrsenroute"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="hrsfuel"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="minenroute"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="minfuel"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="remarks"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="revision"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="route"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="tascruise"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="type"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\fsd.xojo_code}
```xojo
#tag Class
Protected Class fsd
	#tag Method, Flags = &h0
		Sub configmyserver()
		  Dim mode As Integer = 0
		  Dim serverident As String = ""
		  Dim servername As String = ""
		  Dim servermail As String = ""
		  Dim serverhostname As String = ""
		  Version = App.version +" " +App.MajorVersion.ToString + "." +App.MinorVersion.ToString + "." + App.BugVersion.ToString
		  Dim serverlocation As String = ""
		  Dim entry As ConfigEntry
		  Dim sysgroup As ConfigGroup = configman.GetGroup("system")
		  If sysgroup <> Nil Then
		    sysgroup.Changed = 0
		    entry = sysgroup.GetEntry("ident")
		    If entry <> Nil Then serverident = entry.GetData()
		    
		    entry = sysgroup.GetEntry("name")
		    If entry <> Nil Then servername = entry.GetData()
		    
		    entry = sysgroup.GetEntry("email")
		    If entry <> Nil Then servermail = entry.GetData()
		    
		    entry = sysgroup.GetEntry("hostname")
		    If entry <> Nil Then serverhostname = entry.GetData()
		    
		    entry = sysgroup.GetEntry("location")
		    If entry <> Nil Then serverlocation = entry.GetData()
		    
		    entry = sysgroup.GetEntry("mode")
		    If entry <> Nil And entry.GetData().Compare("silent", ComparisonOptions.CaseInsensitive) = 0 Then
		      mode = SERVER_SILENT
		    End If
		  End If
		  
		  
		  If serverident = "" then
		    serverident = version
		    DoLog(L_ERR, "No serverident specified")
		  End If
		  if servermail = "" Then
		    servermail = ""
		    DoLog(L_ERR,"No servermail specified")
		  end
		  if serverhostname = "" then
		    Dim n As NetworkInterface
		    n = System.GetNetworkInterface(System.NetworkInterfaceCount - 1)
		    serverhostname = Lowercase(System.Network.LookupDNSAddress(n.IPAddress))
		    
		  end
		  if servername = "" then
		    DoLog(L_Err,"No servername specifeied")
		    servername = serverhostname
		  end
		  if serverlocation = "" then
		    Dolog(L_ERR,"No serverlocation specified")
		    serverlocation=""
		  end
		  Dim flags as integer = mode
		  if MetarManager.source <> SOURCE.SOURCE_NETWORK then
		    flags = flags or server_metar
		  end
		  if myserver <> nil then
		    myserver.configure(servername, servermail,serverhostname,version,serverlocation)
		  else
		    myserver = new server(serverident,servername,servermail,serverhostname,version,flags,serverlocation)
		  end if
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub configure()
		  clientport = 6809
		  serverport = 3011
		  systemport = 3012
		  Dim entry as configentry
		  Dim sysgropup as configgroup = configman.getgroup("system")
		  if sysgropup <> Nil then
		    entry = sysgropup.getentry("clientport")
		    if entry <> Nil then clientport=entry.getint()
		    entry = sysgropup.getentry("serverport")
		    if entry <> Nil then serverport = entry.getint()
		    entry = sysgropup.getentry("systemport")
		    if entry <> Nil then systemport = entry.getint()
		    entry = sysgropup.getentry("certificates")
		    if entry <> Nil then certfile = entry.getdata().Uppercase
		    entry = sysgropup.getentry("whazzup")
		    if entry <> Nil then whazzupfile = entry.getdata().uppercase
		  end
		  configmyserver()
		  readcert()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(configfile as string)
		  certfile = ""
		  whazzupfile = ""
		  DoLog(L_INFO,"Booting Server")
		  pmanager = new pman
		  manager = new manage()
		  configman = new configmanager(configfile)
		  pmanager.registerprocess(configman)
		  MetarManager = new mm
		  pmanager.registerprocess(MetarManager)
		  configure()
		  createmanagevars()
		  createinterfaces()
		  makeconnections()
		  dolog(L_INFO,"We are up")
		  prevnotify=mtime()
		  prevlagcheck = prevnotify
		  timer = prevnotify
		  prevwhazzup = mtime()
		  fileopen=0
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub createinterfaces()
		  Dim prompt as string
		  prompt = sprintf("%s> ", myserver.ident)
		  clientinterface = new clinterface(clientport,"client","client interface")
		  serverinterface = new servinterface(serverport,"server","server interface")
		  systeminterface = new sysinterface(systemport,"system","system management interface")
		  systeminterface.setprompt(prompt)
		  serverinterface.setfeedstrategy(FEED_BOTH)
		  clientinterface.setflood(100000)
		  clientinterface.setfeedstrategy(FEED_IN)
		  clientinterface.setoutbuflimit(100000)
		  pmanager.registerprocess(clientinterface)
		  pmanager.registerprocess(serverinterface)
		  pmanager.registerprocess(systeminterface)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub createmanagevars()
		  Dim varnum as integer
		  varnum = manager.addvar("system.boottime",ATT_DATE)
		  manager.setvar(varnum,Datetime.now.SecondsFrom1970)
		  varnum =  manager.addvar("version.system",ATT_VARCHAR)
		  manager.setvar(varnum, VERSION)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub dochecks()
		  Dim now as integer = MTime()
		  if now-prevnotify>NOTIFYCHECK then
		    Dim sgroup as configgroup = configman.getgroup("system")
		    if sgroup <> nil and sgroup.changed = 1 then configmyserver()
		    serverinterface.sendservernotify("*",myserver,Nil)
		    prevnotify = now
		  end
		  if now-prevlagcheck > LAGCHECK then
		    Dim data as string = sprintf("-1 %lu",MTime())
		    serverinterface.sendping("*",data)
		    prevlagcheck = now
		  end
		  if now-prevcertcheck>CERTFILECHECK then
		    Dim entry as configentry
		    DIm sysgroup as configgroup = configman.getgroup("system")
		    if sysgroup <> Nil then
		      entry = sysgroup.getentry("certificates")
		      if entry<> Nil then
		        certfile = entry.getdata.Uppercase
		        Dim file as new FolderItem(certfile)
		        prevcertcheck = now
		        if file.exists then
		          Dim lastModified as double = file.ModificationDateTime.SecondsFrom1970
		          if lastModified <> cerfilestat then
		            cerfilestat=lastModified
		            readcert()
		          end
		        end
		      end
		    end
		  end
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub handlecidline(line as string)
		  Dim tempcert as certificate
		  Dim mode, level as integer
		  Dim arr(),cid,pwd as string
		    If line.Left(1) = ";" Or line.Left(1) = "#" Then Return
		  arr=line.Split(" ")
		  if arr.LastIndex < 2 then return
		  cid = arr(0)
		  level = arr(2).ToInteger
		  pwd = arr(1)
		  tempCert = getCert(cid)
		  if tempcert = Nil then
		    tempCert = new certificate(cid,pwd,level,MGMTTime(),myserver.ident)
		    mode= CERT_ADD
		  else
		    tempcert.liveCheck = 1
		    if tempcert.password = pwd and tempcert.level = level then return
		    tempcert.configure(pwd,level,MGMTTime,myserver.ident)
		    mode = CERT_MODIFY
		  end
		  if serverinterface <> Nil then serverinterface.sendcert("*",mode,tempcert,NIL)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub makeconnections()
		  Dim cgroup As ConfigGroup = configman.GetGroup("connections")
		  If cgroup Is Nil Then Return
		  
		  Dim centry As ConfigEntry = cgroup.GetEntry("connectto")
		  If centry <> Nil Then
		    ' Connect to the configured servers
		    Dim nparts As Integer = centry.GetNParts()
		    For x As Integer = 0 To nparts - 1
		      Dim portnum As Integer = 3011
		      Dim data As String = centry.GetPart(x)
		      Dim sportnum As Integer = data.IndexOf(":")
		      
		      If sportnum > -1 Then
		        Dim num As Integer
		        portnum = data.Middle(sportnum+1).ToInteger
		        
		        data = data.Left(sportnum)
		      End If
		      
		      If serverinterface.AddUser(data, portnum, Nil) <> 1 Then
		        Dolog(L_ERR, "Connection to " + data + " port " + Str(portnum) + " failed!")
		      Else
		        Dolog(L_INFO, "Connected to " + data + " port " + Str(portnum))
		      End If
		    Next
		  End If
		  
		  centry = cgroup.GetEntry("allowfrom")
		  If centry <> Nil Then
		    ' Allow the configured servers
		    Dim nparts As Integer = centry.GetNParts()
		    For x As Integer = 0 To nparts - 1
		      serverinterface.Allow(centry.GetPart(x))
		    Next
		  Else
		    Dolog(L_WARNING, "No 'allowfrom' found, allowing everybody on the server port")
		  End If
		  
		  serverinterface.SendReset()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub readcert()
		  if certfile = "" then Return
		  Dim file as new FolderItem(certfile)
		  if not file.Exists then
		    DoLog(L_ERR,"Could not open certificates file '" +certfile+"'")
		    Return
		  End If
		  Dim io as TextInputStream = TextInputStream.Open(file)
		  for each c as certificate in Certificates
		    c.liveCheck = 0
		  next
		  Dolog(L_INFO, "Reading certificates from '" + certfile + "'")
		  While not io.EndOfFile
		    
		    handlecidline(io.ReadLine)
		  wend
		  for each c as certificate in Certificates
		    if c.liveCheck = 0 then
		      serverinterface.sendcert("*",CERT_DELETE,c,nil)
		      certificates.RemoveAt(certificates.IndexOf(c))
		    end
		    
		  next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub run()
		  pmanager.run()
		  if timer<>MTime() then
		    timer = MTime()
		    dochecks()
		  end
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		cerfilestat As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		certfile As string
	#tag EndProperty

	#tag Property, Flags = &h0
		clientport As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		fileopen As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		pmanager As pman
	#tag EndProperty

	#tag Property, Flags = &h0
		prevcertcheck As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prevlagcheck As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prevnotify As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prevwhazzup As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		serverport As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		systemport As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		timer As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		whazzupfile As string
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="clientport"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="serverport"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="systemport"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="certfile"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="string"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="whazzupfile"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="string"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="timer"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevnotify"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevlagcheck"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="cerfilestat"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevcertcheck"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevwhazzup"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="fileopen"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\guardstruct.xojo_code}
```xojo
#tag Class
Protected Class guardstruct
	#tag Property, Flags = &h0
		host As String
	#tag EndProperty

	#tag Property, Flags = &h0
		Port As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prevtry As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevtry"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="host"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Port"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\manage.xojo_code}
```xojo
#tag Class
Protected Class manage
	#tag Method, Flags = &h0
		Function addvar(name as string, type as integer) As integer
		  
		  Dim num As Integer = -1
		  
		  For x as integer = 0 To nvars - 1
		    If variables(x).name = "" Then
		      num = x
		      Exit For
		    End If
		  Next
		  
		  If num = -1 Then
		    num = nvars
		    nvars = nvars + 1
		  End If
		  
		  Dim mv as new ManageVar()
		  mv.name = name
		  mv.type = type
		  variables.add(mv)
		  
		  Return num
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor()
		  nvars = 0
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub decvar(num as integer)
		  variables(num).value = variables(num).value-1
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub delvar(num as integer)
		  variables.RemoveAt(num)
		  nvars = nvars-1
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getnvars() As integer
		  return nvars
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getvar(num as integer) As managevar
		  return variables(num)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getvarnum(name as String) As Integer
		  for each v as managevar in variables
		    if v.name = name then return variables.IndexOf(v)
		  next
		  return -1
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub incvar(num as integer)
		  variables(num).value = variables(num).value+1
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setvar(num as integer, val as integer)
		  variables(num).value = val
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setvar(num as integer, val as string)
		  variables(num).value = val
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function sprintvalue(num as integer, buf as string) As String
		  If num >= nvars Or variables(num).name = "" Then Return ""
		  
		  Select Case variables(num).type
		  Case ATT_VARCHAR
		    buf = Chr(34) + variables(num).value.StringValue  + Chr(34) ' Chr(34) is the double-quote character
		  Case ATT_INT
		    buf = Str(variables(num).value.IntegerValue)
		  Case ATT_DATE
		    buf = variables(num).value.IntegerValue.ToString
		    buf = buf.Left(buf.Len - 1) ' Remove the newline character
		  End Select
		  
		  Return buf
		End Function
	#tag EndMethod


	#tag Property, Flags = &h0
		nvars As Integer = 0
	#tag EndProperty

	#tag Property, Flags = &h0
		variables() As managevar
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="nvars"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\managevar.xojo_code}
```xojo
#tag Class
Protected Class managevar
	#tag Property, Flags = &h0
		name As String
	#tag EndProperty

	#tag Property, Flags = &h0
		type As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		value As Variant
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="type"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\sysuser.xojo_code}
```xojo
#tag Class
Protected Class sysuser
Inherits fsdServer.absuser
	#tag Method, Flags = &h0
		Sub Constructor(fd As Integer, parent As SysInterface, peer As String, portnum As Integer, g As Integer)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub DoParse(s As String)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub DoSet(profile As WProfile, s As String, code As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecCert(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecClients(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecConnect(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecDelGuard(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecDisconnect(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecDistance(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecDump(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecHelp(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecKill(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecLog(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecMetar(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecPing(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecPos(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecPwd(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecRange(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecRefMetar(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecRoute(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecSay(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecServers(args() As String, count As Integer, flag As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecTime(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecWall(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecWeather(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ExecWp(args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Information()
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub List(s As String)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Parse(s As String)
		  // Implementation here
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub PrintMetar(wp As String, w As String)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub RunCmd(code As Integer, args() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Usage(code As Integer, s As String)
		  // Implementation here
		  
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		Authorized As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		Lat As Double
	#tag EndProperty

	#tag Property, Flags = &h0
		Lon As Double
	#tag EndProperty

	#tag Property, Flags = &h0
		Parent As SysInterface
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="fd"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="killFlag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="inSize"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outSize"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feed"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feedCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="guardFlag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outBufSoftLimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastActive"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastPing"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevFeedCheck"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="timeout"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="blocked"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="peer"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="port"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="inBuf"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="outBuf"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="prompt"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Authorized"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Lat"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Double"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Lon"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Double"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\pman.xojo_code}
```xojo
#tag Class
Protected Class pman
	#tag Method, Flags = &h0
		Sub Constructor()
		  busy = false
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub registerprocess(what as process)
		  processes.add(what)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub run()
		  busy = false
		  for each p as Process in processes
		    if p.run then
		      busy = true
		    end
		  next
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		busy As Boolean
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="busy"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\process.xojo_code}
```xojo
#tag Class
Protected Class process
	#tag Method, Flags = &h0
		Sub Constructor()
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function run() As Boolean
		  return false
		End Function
	#tag EndMethod


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\configmanager.xojo_code}
```xojo
#tag Class
Protected Class configmanager
Inherits fsdServer.process
	#tag Method, Flags = &h0
		Sub Constructor(name as string)
		  filename = name.Uppercase
		  ngroups = 0
		  changed = 1
		  Dim fname as integer = manager.addvar("config.filename",ATT_VARCHAR)
		  manager.setvar(fname,name)
		  varaccess = manager.addvar("config.lastread",ATT_DATE)
		  parsefile()
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function creategroup(name as String) As configgroup
		  groups.add(new configgroup(name))
		  return groups(groups.LastIndex)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getgroup(name as string) As configgroup
		  for each cg as configgroup in groups
		    if cg.name = name then
		      return cg
		    end
		  next
		  return nil
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub parsefile()
		  Dim line as string
		  Dim io as TextInputStream
		  Dim file as new FolderItem(filename)
		  Dim current as configgroup = nil
		  if not file.Exists then return
		  io=TextInputStream(file)
		  manager.setvar(varaccess,DateTime.Now.SecondsFrom1970)
		  while not io.EndOfFile
		    line = io.ReadLine.Trim()
		    if line = ""  or line.Left(1) = "#" then continue
		    if line.Left(1) = "[" then
		      Dim p as integer = line.IndexOf("]")
		      if p > - 1 then
		        line = line.left(p)
		        current = getgroup(line.Middle(1))
		        if current = nil then current = creategroup(line.Middle(1))
		      End If
		      Continue
		    End If
		    If current is nil then Continue
		    Dim sep as integer = line.IndexOf("=")
		    if sep > -1 then
		      Dim varName as string = line.left(sep).trim
		      Dim varvalue as string = line.Right(sep+1).trim
		      current.handleentry(varname,varvalue)
		      if current.changed = 1 then changed = 1
		    End if
		    
		  wend
		  io.Close
		  prevcheck= MTime()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function run() As Boolean
		  if mtime-prevcheck<CONFIGINTERVAL then return false
		  prevcheck = mtime()
		  Dim file as new FolderItem(filename)
		  if not file.Exists then return false
		  Dim lastModified as Double = file.ModificationDateTime.SecondsFrom1970
		  if lastModified = lastmodify then return false
		  lastmodify = lastmodified
		  ParseFile()
		  Return false
		End Function
	#tag EndMethod


	#tag Property, Flags = &h0
		changed As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		filename As String
	#tag EndProperty

	#tag Property, Flags = &h0
		groups() As configgroup
	#tag EndProperty

	#tag Property, Flags = &h0
		lastmodify As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		ngroups As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prevcheck As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varaccess As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="filename"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="ngroups"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varaccess"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="changed"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevcheck"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastmodify"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\tcpinterface.xojo_code}
```xojo
#tag Class
Protected Class tcpinterface
Inherits fsdServer.process
	#tag Method, Flags = &h0
		Sub addguard(who as absuser)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function adduser(name as string, port as integer, terminal as absuser) As Integer
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub allow(name as string)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function calcmasks(rmask as MemoryBlock, wmask as MemoryBlock) As Integer
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(port as integer, code as string, descr as string)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub delguard()
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub dochecks()
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub insertuser(u as absuser)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub makevars(code as string)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub newuser(fd as integer, peername as string, portnum as integer, g as integer)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub removeuser(u as absuser)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function run() As Boolean
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setfeedstrategy(strat as integer)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setflood(limit as integer)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setoutbuflimit(limit as integer)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setprompt(s as string)
		  
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		description As String
	#tag EndProperty

	#tag Property, Flags = &h0
		feedstrategy As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		floodlimit As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		outbuflimit As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prevchecks As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prompt As String
	#tag EndProperty

	#tag Property, Flags = &h0
		rootallow As allowstruct
	#tag EndProperty

	#tag Property, Flags = &h0
		sock As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varclosed(9) As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varcurrent As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varpeak As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		vartotal As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="description"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="sock"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varcurrent"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="vartotal"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varpeak"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feedstrategy"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="floodlimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outbuflimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevchecks"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prompt"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\sysinterface.xojo_code}
```xojo
#tag Class
Protected Class sysinterface
Inherits fsdServer.tcpinterface
	#tag Method, Flags = &h0
		Sub Constructor(port as integer, code as string, descr as string)
		  // Calling the overridden superclass constructor.
		  Super.Constructor(port, code, descr)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub NewUser(fd as integer, peer as string, pornum as integer, g as integer)
		  // Implementation here
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ReceiveMetar(fd As Integer, wp As String, w As String)
		  // Implementation here 
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ReceiveNowx(fd As Integer, st As String)
		  // Implementation here
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ReceivePong(from As String, data As String, pc As String, hops As String)
		  // Implementation here
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ReceiveWeather(fd As Integer, w As WProfile)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function Run() As Boolean
		  // Implementation here
		  Return false
		End Function
	#tag EndMethod


	#tag ViewBehavior
		#tag ViewProperty
			Name="description"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="sock"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varcurrent"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="vartotal"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varpeak"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feedstrategy"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="floodlimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outbuflimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevchecks"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prompt"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\server.xojo_code}
```xojo
#tag Class
Protected Class server
	#tag Method, Flags = &h0
		Shared Sub ClearServerChecks()
		  For Each s As Server In Servers
		    s.Check = False
		  Next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub configure(n as string, e as string, h as string, v as string, l as string)
		  Name = n
		  email = e
		  hostname = h
		  version = v
		  location = l
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(i as string, n as string, e as string, h as string, v as string, fl as integer, l as string)
		  Ident = i
		  Name = n
		  Email = e
		  hostname = h
		  Version = v
		  Flags = fl
		  packetdrops = 0
		  Location = l
		  Path = Nil
		  Hops = -1
		  pcount = -1 
		  Lag = -1
		  Alive = MTime()
		  check = true
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Shared Function getServer(id as String) As Server
		  For Each s As Server In Servers
		    If s.Ident.Lowercase = id.Lowercase Then Return s
		  Next
		  Return Nil
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub receivepong(data as string)
		  // expects "fd timestamp"
		  Dim parts() As String = data.Split(" ")
		  If parts.Ubound < 1 Then Return
		  Dim tstamp As Int64 = Val(parts(1))
		  Lag = MTime() - tstamp
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Remove()
		  // 1) log drop
		  dolog(L_ERR, "Dropping server " + Ident + "(" + Name + ")")
		  
		  // 2) remove from global array
		  For i As Integer = 0 To Servers.LastIndex
		    If Servers(i) = Self Then
		      Servers.RemoveAt(i)
		      Exit
		    End If
		  Next
		  
		  // 3) drop any clients tied to this server
		  //    You’ll need to implement Client.List and remove logic
		  For Each c As Client In clients
		    If c.Location = Me Then
		      clients.RemoveAt(clients.IndexOf(c))
		    End If
		  Next
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setalive()
		  alive = MTime
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setPath(who as absuser, hopcount as integer)
		  Path = who
		  hops=hopcount
		  if who = nil then
		    pcount= -1
		  end
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		alive As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		check As Boolean
	#tag EndProperty

	#tag Property, Flags = &h0
		email As String
	#tag EndProperty

	#tag Property, Flags = &h0
		flags As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		hops As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		hostname As String
	#tag EndProperty

	#tag Property, Flags = &h0
		ident As String
	#tag EndProperty

	#tag Property, Flags = &h0
		lag As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		location As String
	#tag EndProperty

	#tag Property, Flags = &h0
		name As String
	#tag EndProperty

	#tag Property, Flags = &h0
		packetdrops As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		path As absuser
	#tag EndProperty

	#tag Property, Flags = &h0
		pcount As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		version As String
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="pcount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="hops"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="check"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="flags"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="packetdrops"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="alive"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="email"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="ident"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="hostname"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="version"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="location"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\wprofile.xojo_code}
```xojo
#tag Class
Protected Class wprofile
	#tag Method, Flags = &h0
		Sub Activate()
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(name As String, creation As DateTime, origin As String)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Fix(lat As Double, lon As Double)
		  // Implementation here
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub FixVisibility()
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub GenRawCode()
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function GetSeason(lat As Double) As Integer
		  // Implementation here
		  Return 0
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub LoadArray(s() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ParseAlt(s() As String, count As Integer) As Integer
		  // Implementation here
		  Return 0
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ParseMetar(s() As String, count As Integer)
		  // Implementation here
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ParseRvr(s() As String, count As Integer) As Integer
		  // Implementation here
		  Return 0
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ParseSky(s() As String, count As Integer) As Integer
		  // Implementation here
		  Return 0
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ParseTemp(s() As String, count As Integer) As Integer
		  // Implementation here
		  Return 0
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ParseVis(s() As String, count As Integer) As Integer
		  // Implementation here
		  Return 0
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ParseWind(s() As String, count As Integer) As Integer
		  // Implementation here
		  Return 0
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ParseWx(s() As String, count As Integer) As Integer
		  // Implementation here
		  Return 0
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function Print() As string
		  // Implementation here
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function Print(data As String) As string
		  // Implementation here
		  
		End Function
	#tag EndMethod


	#tag Property, Flags = &h0
		Active As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		Barometer As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		Clouds() As cloudlayer
	#tag EndProperty

	#tag Property, Flags = &h0
		Creation As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		DewPoint As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		Name As String
	#tag EndProperty

	#tag Property, Flags = &h0
		Origin As String
	#tag EndProperty

	#tag Property, Flags = &h0
		RawCode As String
	#tag EndProperty

	#tag Property, Flags = &h0
		Temps() As templayer
	#tag EndProperty

	#tag Property, Flags = &h0
		TStorm As Cloudlayer
	#tag EndProperty

	#tag Property, Flags = &h0
		Version As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		Visibility As Double
	#tag EndProperty

	#tag Property, Flags = &h0
		Winds() As windlayer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Active"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Barometer"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Creation"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="DewPoint"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Origin"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="RawCode"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Version"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Visibility"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Double"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\absuser.xojo_code}
```xojo
#tag Class
Protected Class absuser
	#tag Method, Flags = &h0
		Sub Block()
		  blocked = 1
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Sub CalcFeed()
		  // Implementation here
		  Dim now As Integer = mtime()
		  Dim elapsed As Integer = now - prevFeedCheck
		  Dim fact1 As Double = elapsed / 300.0
		  Dim fact2 As Double = 1.0 - fact1
		  Dim newFeed As Integer = feedCount / elapsed
		  
		  If feed = -1 Then
		    feed = newFeed
		  Else
		    feed = CType(newFeed * fact1 + feed * fact2, Integer)
		  End If
		  
		  feedCount = 0
		  prevFeedCheck = now
		  Dim bandwidth As Integer = feed
		  
		  If baseParent.FeedStrategy = FEED_BOTH Then
		    bandwidth = bandwidth / 2
		  End If
		  
		  If bandwidth > 50 Then
		    outBufSoftLimit = bandwidth * 30
		  End If
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(d As Integer, p As TcpInterface, peername As String, portnum As Integer, g As Integer)
		  fd = d
		  killFlag = 0
		  inBuf = ""
		  outBuf = ""
		  inSize = 1
		  outSize = 1
		  blocked = 0
		  prompt = ""
		  feedCount = 0
		  feed = -1
		  baseParent = p
		  timeout = 0
		  peer = peername
		  port = portnum
		  prevFeedCheck = 0
		  guardFlag = g
		  outBufSoftLimit = -1
		  SetActive()
		  
		  // Add the user to the users() list
		  users.Append(Me)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Sub Input()
		  // Implementation here
		  inbuf = Socket.ReadAll()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Kill(reason As KILL)
		  killFlag = Ctype(reason,Int32)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function NextLine(source As String, dest As String) As Integer
		  Const MAXLINELENGTH As Integer = 1024 ' Define this according to your needs
		  Dim len As Integer = source.IndexOf(Chr(13)) ' Find the first occurrence of '\r'
		  If len = -1 Then 
		    len = source.IndexOf(Chr(10))
		  end 
		  ' If '\r' not found, find '\n'
		  If len = -1 Then 
		    Return -1 ' No newline found
		    
		  end
		  ' Extract the line
		  dest = source.Left(len)
		  
		  ' Remove the line from the source
		  Dim where As Integer = len
		  While where < source.Length And (source.Mid(where, 1) = Chr(10) Or source.Mid(where, 1) = Chr(13))
		    where = where + 1
		  Wend
		  
		  source = source.Mid(where)
		  
		  ' Check if the line length exceeds MAXLINELENGTH
		  If dest.Length >= MAXLINELENGTH Then
		    dest = ""
		    Return -1
		  End If
		  
		  Return where
		End Function
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Sub Output()
		  Socket.Write(outBuf)
		  Socket.Flush()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Sub Parse(s As String)
		  // Implementation here _
		  System.DebugLog("absuser.parse Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub PrintPrompt()
		  If prompt="" or killFlag > 0 or blocked > 0 then
		    return
		  end
		  UPrintf("%s",prompt)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Function Run() As Integer
		  // Implementation here
		  Dim buf as string
		  Dim count as integer = 0
		  Dim stat as integer
		  Dim ok as integer = 0 
		  if blocked <> 0 then
		    return 0
		  end
		  stat=NextLine(inBuf,buf)
		  while stat<>-1 and count + 1<60
		    count = count + 1
		    If baseParent.floodlimit<>-1 and feed > baseParent.floodlimit then
		      self.kill(kill.flood)
		      exit while
		    end
		    Parse(buf)
		    ok = 1
		    if blocked>0 then
		      exit while
		    end
		    
		    
		    stat=NextLine(inBuf,buf)
		  wend
		  
		  
		  
		  Return 0
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Send(data As String)
		  System.DebugLog("absuser.send Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub SendPing()
		  System.DebugLog("absuser.sendping Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub SetActive()
		  lastActive = MTime()
		  lastping = lastActive
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Sub SetMasks()
		  System.DebugLog("absuser.setmasks Not yet implemented")
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Sub SetPrompt(s As String)
		  prompt = StrUpr(s)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Unblock()
		  blocked = 0
		  PrintPrompt()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub UPrintf(s As String, ParamArray args() As Variant)
		  if killFlag > 0 then
		    return
		  end
		  //Todo
		  System.DebugLog("absuser.uprintf Not yet implemented")
		  System.DebugLog(s)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub USLPrintf(format As String, code As Integer, ParamArray args() As Variant)
		  if killflag > 0 then
		    return
		  end
		  System.DebugLog("absuser.uslprintf Not yet implemented")
		  System.DebugLog(format)
		  System.DebugLog(code.ToString)
		  for each a as Variant in args
		    System.DebugLog(a.StringValue)
		  next
		  
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		baseParent As tcpinterface
	#tag EndProperty

	#tag Property, Flags = &h0
		blocked As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		fd As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		feed As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		feedCount As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		guardFlag As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		inBuf As String
	#tag EndProperty

	#tag Property, Flags = &h0
		inSize As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		killFlag As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		lastActive As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		lastPing As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		outBuf As String
	#tag EndProperty

	#tag Property, Flags = &h0
		outBufSoftLimit As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		outSize As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		peer As String
	#tag EndProperty

	#tag Property, Flags = &h0
		port As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prevFeedCheck As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prompt As String
	#tag EndProperty

	#tag Property, Flags = &h0
		Socket As TCPSocket
	#tag EndProperty

	#tag Property, Flags = &h0
		timeout As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="fd"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="killFlag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="inSize"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outSize"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feed"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feedCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="guardFlag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outBufSoftLimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastActive"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastPing"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevFeedCheck"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="timeout"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="blocked"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="peer"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="port"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="inBuf"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="outBuf"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="prompt"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\cluser.xojo_code}
```xojo
#tag Class
Protected Class cluser
Inherits fsdServer.absuser
	#tag Method, Flags = &h0
		Function callsignok(name as string) As integer
		  Dim temp as string
		  if name.Length<2 or name.Length > CALLSIGNBYTES then
		    return CType(ERR.CSINVALID,Int32)
		  end
		  if strpbrk(name,"!@#$*:& \t") then
		    return CType(ERR.CSINVALID,INT32)
		  end
		  for each c as client in clients
		    if c.callsign = name then
		      return CType(ERR.CSINUSE,INT32)
		    end
		  next
		  return CType(ERR.OK,INT32)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function checklogin(id as string, password as string, req as integer) As integer
		  if id = "" Then Return -2
		  Dim max as integer
		  Dim ok as boolean = MaxLevel(id,password,max)
		  if not ok then
		    Dim se as integer = showerror(ERR.CIDINVALID,id)
		    Return -1
		  end
		  if req>max then
		    return max
		  else
		    return req
		  end
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function checksource(from as string) As boolean
		  if from <> thisclient.callsign then
		    Dim i as integer = showerror(ERR.SRCINVALID,from)
		    Return False
		  end
		  Return True
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(fd as integer, p as clinterface, pn as string, portnum as integer, gg as integer)
		  // Calling the overridden superclass constructor.
		  Super.Constructor(fd, p, pn, portnum, gg)
		  parent = p
		  thisclient = nil
		  Dim gu as configgroup = configman.getgroup("system")
		  Dim e as configentry
		  if gu<> nil then
		    e = gu.getentry("maxclients")
		  else
		    e=nil
		  end
		  'Dim total as Integer = manager.getvar(p.varcurrent).value.IntegerValue
		  'if e<>Nil and Val(e.getdata)<=total then
		  'Dim i as integer = showerror(ERR.SERVFULL,"")
		  'Kill(kill.COMMAND)
		  'end
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub doparse(s as string)
		  Dim cmd As String = s.Left(3)
		  Dim data() As String
		  Dim index As CL = GetComm(cmd)
		  Dim count As Integer
		  
		  If index = CL.UNOWN Then
		    Dim i as integer = ShowError(ERR.SYNTAX, "")
		    Return
		  End If
		  
		  If thisClient = Nil And index <> CL.ADDATC And index <> CL.ADDPILOT Then
		    Return
		  End If
		  
		  ' Just a hack to put the pointer on the first arg here
		  s = s.Mid(Len(clcmdnames(index)) + 1)
		  count = BreakPacket(s, data)
		  
		  Select Case index
		  Case CL.ADDATC
		    ExecAA(data, count)
		  Case CL.ADDPILOT
		    ExecAP(data, count)
		  Case CL.PLAN
		    ExecFP(data, count)
		  Case CL.RMATC, CL.RMPILOT
		    ExecD(data, count)
		  Case CL.PILOTPOS
		    ExecPilotPos(data, count)
		  Case CL.ATCPOS
		    ExecATCPos(data, count)
		  Case CL.PONG, CL.PING
		    ExecMulticast(data, count, index, 0, true)
		  Case CL.MESSAGE
		    ExecMulticast(data, count, index, 1, true)
		  Case CL.REQHANDOFF, CL.ACHANDOFF
		    ExecMulticast(data, count, index, 1, false)
		  Case CL.SB, CL.PC
		    ExecMulticast(data, count, index, 0, false)
		  Case CL.WEATHER
		    ExecWeather(data, count)
		  Case CL.REQCOM
		    ExecMulticast(data, count, index, 0, false)
		  Case CL.REPCOM
		    ExecMulticast(data, count, index, 1, false)
		  Case CL.REQACARS
		    ExecACARS(data, count)
		  Case CL.CR
		    ExecMulticast(data, count, index, 2, false)
		  Case CL.CQ
		    ExecCQ(data, count)
		  Case CL.KILL
		    ExecKill(data, count)
		  Case Else
		    Dim i as integer = ShowError(ERR.SYNTAX,"")
		  End Select
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execaa(s() as string, count as integer)
		  
		  If thisClient <> Nil Then
		    ShowError(ERR.REGISTERED, "")
		    Return
		  End If
		  
		  If count < 7 Then
		    ShowError(ERR.SYNTAX, "")
		    Return
		  End If
		  
		  Dim err2 As Integer = CallSignOK(s(0))
		  If err2 <> 0 Then
		    ShowError(err2, "")
		    Kill(KILL.COMMAND)
		    Return
		  End If
		  
		  If Val(s(6)) <> NEEDREVISION Then
		    ShowError(ERR.REVISION, "")
		    Kill(KILL.PROTOCOL)
		    Return
		  End If
		  
		  Dim req As Integer = Val(s(5))
		  If req < 0 Then req = 0
		  
		  Dim level As Integer = CheckLogin(s(3), s(4), req)
		  If level = 0 Then
		    ShowError(ERR.CSSUSPEND, "")
		    Kill(KILL.COMMAND)
		    Return
		  ElseIf level = -1 Then
		    Kill(KILL.COMMAND)
		    Return
		  ElseIf level = -2 Then
		    level = 1
		  End If
		  
		  If level < req Then
		    ShowError(ERR.LEVEL, s(5))
		    Kill(KILL.COMMAND)
		    Return
		  End If
		  
		  thisClient = New Client(s(3), myServer, s(0), CLIENT_ATC, level, s(6), s(2), -1)
		  ServerInterface.SendAddClient("*", thisClient, Nil, Me, false)
		  ReadMOTD()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execacars(s() as string, count as integer)
		  If count < 3 Then
		    ShowError(ERR.SYNTAX, "")
		    Return
		  End If
		  
		  If Not CheckSource(s(0)) Then Return
		  
		  If StrComp(s(2), "METAR", CType(ComparisonOptions.CaseInsensitive,Int32)) = 0 And count > 3 Then
		    Dim source As String = "%" + thisClient.Callsign
		    MetarManager.RequestMetar(source, s(3), false, -1)
		    
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execap(s() as string, count as integer)
		  If thisClient <> Nil Then
		    ShowError(ERR.REGISTERED, "")
		    Return
		  End If
		  
		  If count < 8 Then
		    ShowError(ERR.SYNTAX, "")
		    Return
		  End If
		  
		  Dim errs As Integer = CallSignOK(s(0))
		  If errs <> 0 Then
		    ShowError(errs, "")
		    Kill(KILL.COMMAND)
		    Return
		  End If
		  
		  If Val(s(5)) <> NEEDREVISION Then
		    ShowError(ERR.REVISION, "")
		    Kill(KILL.PROTOCOL)
		    Return
		  End If
		  
		  Dim req As Integer = Val(s(4))
		  If req < 0 Then req = 0
		  
		  Dim level As Integer = CheckLogin(s(2), s(3), req)
		  If level < 0 Then
		    Kill(KILL.COMMAND)
		    Return
		  ElseIf level = 0 Then
		    ShowError(ERR.CSSUSPEND, "")
		    Kill(KILL.COMMAND)
		    Return
		  End If
		  
		  If level < req Then
		    ShowError(ERR.LEVEL, s(4))
		    Kill(KILL.COMMAND)
		    Return
		  End If
		  
		  thisClient = New Client(s(2), myServer, s(0), CLIENT_PILOT, level, s(4), s(7), Val(s(6)))
		  ServerInterface.SendAddClient("*", thisClient, Nil, Me, false)
		  ReadMOTD()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execatcpos(s() as string, count as integer)
		  If count < 8 Then
		    ShowError(ERR.SYNTAX, "")
		    Return
		  End If
		  
		  If Not CheckSource(s(0)) Then Return
		  Dim subarray() as string
		  for i as integer = 1 to ubound(s)
		    subarray.add(s(i))
		  next
		  thisClient.UpdateATC(subarray)
		  ServerInterface.SendATCData(thisClient, Me)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execcq(s() as string, count as integer)
		  If count < 3 Then
		    ShowError(ERR.SYNTAX, "")
		    Return
		  End If
		  
		  If StrComp(s(1), "server", Ctype(ComparisonOptions.CaseInsensitive,Int32)) <> 0 Then
		    ExecMulticast(s, count, CL.CQ, 1, true)
		    Return
		  End If
		  
		  If StrComp(s(2).Uppercase, "RN", Ctype(ComparisonOptions.CaseInsensitive,Int32)) = 0 Then
		    Dim cli As Client = GetClient(s(1))
		    If cli <> Nil Then
		      Dim data As String = sprintf("%s:%s:RN:%s:USER:%d",cli.callsign,thisclient.callsign,cli.realname,cli.rating)
		      ClientInterface.SendPacket(thisClient, cli, Nil, CLIENT_ALL, -1, CL.CR, data)
		      Return
		    End If
		  End If
		  
		  If StrComp(s(2), "fp", Ctype(ComparisonOptions.CaseInsensitive,Int32)) = 0 Then
		    Dim cli As Client = GetClient(s(3))
		    If cli = Nil Then
		      ShowError(ERR.NOSUCHCS, s(3))
		      Return
		    End If
		    If cli.Plan = Nil Then
		      ShowError(ERR.NOFP, "")
		      Return
		    End If
		    ClientInterface.SendPlan(thisClient, cli, -1)
		    Return
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execd(s() as string, count as integer)
		  if count = 0 then
		    showerror(ERR.SYNTAX,"")
		    return
		  end
		  if not checksource(s(0)) then return
		  kill(kill.COMMAND)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execfp(s() as string, count as integer)
		  if count < 17 then
		    showerror(ERR.SYNTAX,"")
		    return
		  end
		  if not checksource(s(0)) then return
		  Dim subarray() as string
		  for i as integer = 2 to UBound(s)
		    subarray.Add(s(i))
		  next
		  thisclient.handlefp(subarray)
		  serverinterface.sendplan("*",thisclient,Nil)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execkill(s() as string, count as integer)
		  Dim junk As String
		  If count < 3 Then
		    ShowError(ERR.SYNTAX, "")
		    Return
		  End If
		  
		  Dim cli As Client = GetClient(s(1))
		  If cli = Nil Then
		    ShowError(ERR.NOSUCHCS, s(1))
		    Return
		  End If
		  
		  If thisClient.Rating < 11 Then
		    junk = "You are not allowed to kill users!"
		    ClientInterface.SendGeneric(thisClient.Callsign, thisClient, Nil, Nil, "server", junk, CL.MESSAGE)
		    junk = thisClient.Callsign + " attempted to remove " + s(1) + ", but was not allowed to"
		    DoLog(L_ERR, junk)
		  Else
		    junk = "Attempting to kill " + s(1)
		    ClientInterface.SendGeneric(thisClient.Callsign, thisClient, Nil, Nil, "server", junk, CL.MESSAGE)
		    junk = thisClient.Callsign + " Killed " + s(1)
		    DoLog(L_INFO, junk)
		    ServerInterface.SendKill(cli, s(2))
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execmulticast(s() as string, count as integer, cmd as CL, nargs as integer, multiok as boolean)
		  nargs = nargs + 2
		  If count < nargs Then
		    ShowError(ERR.SYNTAX, "")
		    Return
		  End If
		  
		  Dim from As String = s(0)
		  Dim tos As String = s(1)
		  Dim data As String = ""
		  Dim subarray() as String
		  for i as integer = 2 to UBound(s)
		    subarray.add(s(i))
		  next
		  data = CatCommand(subarray, count - 2, data)
		  
		  If Not CheckSource(from) Then Return
		  
		  ServerInterface.SendMulticast(thisClient, tos, data, cmd, multiok, Me)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execpilotpos(s() as string, count as integer)
		  if count < 10 then
		    showerror(err.SYNTAX,"")
		    Return
		  end
		  if not checksource(s(1)) then Return
		  thisclient.updatepilot(s)
		  serverinterface.sendpilotdata(thisclient,self)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execweather(s() as string, count as integer)
		  if count < 3 then
		    showerror(ERR.SYNTAX,"")
		    return
		  end
		  if not checksource(s(0)) then return
		  Dim source as string = sprintf("%%%s",thisclient.callsign)
		  MetarManager.requestmetar(source,s(2),true,-1)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getcomm(cmd as string) As CL
		  for i as integer = 0 to maxcl
		    Dim ce as CL = CL(i)
		    if cmd.left(clcmdnames(ce).Length) = clcmdnames(ce) then
		      return ce
		    end
		  next
		  return cl.UNOWN
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function MaxLevel(id as string, password as string, byref max as integer) As Boolean
		  Dim temp as certificate = getCert(id)
		  if temp = nil then
		    max = LEV_OBSPILOT
		    return false
		  end
		  if temp.password =  password then
		    max = temp.level
		    temp.prevVisit = Datetime.Now.SecondsFrom1970
		    return true
		    
		  end
		  max = LEV_OBSPILOT
		  return false
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub parse(s as string)
		  SetActive()
		  doparse(s)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub readmotd()
		  Dim io As TextInputStream
		  Dim line As String
		  Dim file As new FolderItem(PATH_FSD_MOTD)
		  
		  
		  line = PRODUCT
		  ClientInterface.SendGeneric(ThisClient.Callsign, ThisClient, Nil, Nil, "server", line, CL.MESSAGE)
		  
		  If file.Exists Then
		    io = TextInputStream.Open(file)
		    While Not io.EOF
		      line = io.ReadLine
		      ClientInterface.SendGeneric(ThisClient.Callsign, ThisClient, Nil, Nil, "server", line, CL.MESSAGE)
		    Wend
		    io.Close
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub showerror(num as ERR, env as string)
		  Dim i as integer = showerror(num,env)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function showerror(num as ERR, env as string) As integer
		  
		  return showerror(CType(num,int32),env)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub showerror(num as integer, env as string)
		  
		  Dim i as integer = showerror(num,env)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function showerror(num as integer, env as string) As integer
		  Dim cs as string = "unknown"
		  if thisclient <> nil then
		    cs = thisclient.callsign
		  end
		  UPrintf("$ERserver:%s:%03d:%s:%s\r\n",cs,num,env,errstr(num))
		  
		  return num
		End Function
	#tag EndMethod


	#tag Property, Flags = &h0
		parent As clinterface
	#tag EndProperty

	#tag Property, Flags = &h0
		thisclient As client
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="fd"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="killFlag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="inSize"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outSize"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feed"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feedCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="guardFlag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outBufSoftLimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastActive"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastPing"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevFeedCheck"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="timeout"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="blocked"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="peer"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="port"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="inBuf"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="outBuf"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="prompt"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\mm.xojo_code}
```xojo
#tag Class
Protected Class mm
Inherits fsdServer.process
	#tag Method, Flags = &h0
		Sub addq(dest as String, metar as string, parsed as boolean, fd as integer)
		  // Try to short-circuit with a cached profile
		  Dim prof As WProfile = GetWProfile(metar)
		  If prof <> Nil And prof.Active =1 Then
		    If parsed =true Then
		      ServerInterface.SendWeather(dest, fd, prof)
		    Else
		      ServerInterface.SendMetar(dest, fd, metar, prof.RawCode)
		    End If
		    Return
		  End If
		  
		  // Otherwise enqueue a new request
		  Dim temp As mmq
		  temp.Destination = dest
		  temp.MetarId     = metar
		  temp.Fd          = fd
		  temp.Parsed      = parsed
		  // insert at head of linked list
		  mmqs.add(temp)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub buildlist()
		  // 1) Locate the file
		  Dim f As FolderItem = GetFolderItem(METARFILE)
		  If f = Nil Or Not f.Exists Then Return
		  
		  // 2) Record modification time
		  metarFileTime = f.ModificationDateTime.SecondsFrom1970
		  
		  // 3) Open for random‐access
		  Dim bs As BinaryStream = BinaryStream.Open(f, False)
		  
		  // 4) Clear prior data
		  stationList = Nil
		  nStations   = 0
		  
		  // 5) Scan file line‐by‐line
		  While bs.Position < bs.Length
		    Dim offset As Int64 = bs.Position
		    Dim line   As String = ReadLine(bs)
		    If line.Length < 30 Then Continue
		    
		    // break up on whitespace, collect up to 3 tokens
		    Dim rawTokens() As String = line.ReplaceAll(Chr(9)," ").Split(" ")
		    Dim parts()     As String
		    For Each t As String In rawTokens
		      t = t.Trim
		      If t <> "" Then parts.Append(t)
		      If parts.Ubound >= 2 Then Exit For
		    Next
		    If parts.Ubound < 2 Then Continue
		    If line.BeginsWith("     ") Then Continue
		    
		    // pick the 4‐char station code
		    Dim statName As String
		    If parts(0).Length = 4 Then
		      statName = parts(0)
		    ElseIf parts(1).Length = 4 Then
		      statName = parts(1)
		    Else
		      Continue
		    End If
		    
		    statName = statName.Uppercase
		    
		    // append to dynamic array
		    Dim st As Station
		    st.Location = offset
		    st.Name     = statName
		    stationList.Append(st)
		    nStations = stationList.Ubound + 1
		  Wend
		  
		  bs.Close
		  
		  // 6) Sort and publish
		  //stationList.Sort(AddressOf CompareStation)
		  manager.SetVar(varStations, nStations)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub check()
		  // Get current UTC time
		  Dim now As DateTime = DateTime.Now
		  Dim currHour As Integer = now.Hour
		  
		  // Every 12-hour boundary (or first run) re-seed & refresh variations
		  If prevHour = -1 _
		    Or ((prevHour <> currHour) And (currHour = 0 Or currHour = 12)) Then
		    
		    prevHour = currHour
		    
		    // Seed your RNG (you'll need to implement msrand/mrand)
		    // Use year-since-1900 and month-1 to match C gmtime behavior
		    Dim seedVal As Int32 = currHour * (now.Year - 1900) * (1 + (now.Month - 1))
		    
		    // Assume VAR_AMOUNT is the length of your variation() array
		    For x As Integer = 0 To variation.Ubound
		      variation(x) = mrand()
		    Next
		  End If
		  
		  // If we're in download mode, decide whether to start a new download
		  If source = fsdServer.SOURCE.SOURCE_DOWNLOAD Then
		    // mtime() should return the timestamp (seconds since 1970) of your last
		    // successful download (matching C++ mtime())
		    Dim mNow      As Int64 = MTime()
		    Dim elapsed   As Int64 = mNow - prevDownload
		    Dim currMin   As Integer = now.Minute
		    
		    // At :10 past the hour (if >1m since last), or every hour, or never run yet
		    If (currMin = 10 And elapsed > 60) _
		      Or elapsed > 3600 _
		      Or prevDownload = 0 Then
		      
		      StartDownload()
		    End If
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub checkmetarfile()
		  // Check if the METAR file has been updated on disk
		  Dim f As FolderItem = GetFolderItem(METARFILE)
		  If f = Nil Or Not f.Exists Then Return
		  
		  // Compare stored timestamp against current file timestamp
		  Dim currentTime As Int64 = f.ModificationDateTime.SecondsFrom1970
		  If currentTime <> metarFileTime Then
		    // Rebuild index (BuildList also updates metarFileTime)
		    BuildList()
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function CompareStation(a As Station, b As Station) As Integer
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor()
		  // initialize sockets and state
		  prevDownload     = 0
		  ioIn             = Nil
		  ioOut            = Nil
		  newFileReady     = False
		  sock             = -1
		  dataSock         = -1
		  dataReadSock     = -1
		  passiveMode      = True
		  sockRecvBuffer   = ""
		  sockRecvBufferLen= 0
		  mmqs.RemoveAll()
		  source     = fsdServer.SOURCE.SOURCE_NETWORK
		  downloading= False
		  ftpEmail   = ""
		  prevHour   = -1
		  nStations  = 0
		  metarHost  = ""
		  metarDir   = ""
		  
		  //–– Load "weather" config
		  Dim wGroup As ConfigGroup = configMan.GetGroup("weather")
		  If wGroup <> Nil Then
		    Dim entry As ConfigEntry
		    
		    // source
		    entry = wGroup.getentry("source")
		    If entry <> Nil Then
		      Select Case entry.Data.Lowercase
		      Case "network"
		        source = fsdServer.SOURCE.SOURCE_NETWORK
		      Case "file"
		        source = fsdServer.SOURCE.SOURCE_FILE
		      Case "download"
		        source = fsdServer.SOURCE.SOURCE_DOWNLOAD
		      Case Else
		        dolog(L_ERR, _
		        "Unknown METAR source '" + entry.Data + "' in config file")
		      End Select
		    End If
		    
		    // server & dir
		    entry = wGroup.getentry("server")
		    If entry <> Nil Then metarHost = entry.Data
		    entry = wGroup.getentry("dir")
		    If entry <> Nil Then metarDir  = entry.Data
		    
		    // ftpmode
		    entry = wGroup.getentry("ftpmode")
		    If entry <> Nil Then
		      passiveMode = (entry.Data.Lowercase = "passive")
		    End If
		  End If
		  
		  //–– Load system email for anonymous FTP
		  wGroup = configMan.GetGroup("system")
		  If wGroup <> Nil Then
		    Dim e2 As ConfigEntry = wGroup.getentry("egetentrymail")
		    If e2 <> Nil Then ftpEmail = e2.Data
		  End If
		  
		  // defaults for download mode
		  If source = fsdServer.SOURCE.SOURCE_DOWNLOAD Then
		    If metarHost = "" Then metarHost = "weather.noaa.gov"
		    If metarDir  = "" Then metarDir  = "data/observations/metar/cycles/"
		  End If
		  
		  //–– Publish status variables
		  manager.SetVar(manager.AddVar("metar.method",  1), SourceToString(source))
		  varPrev     = manager.AddVar("metar.current",  2)
		  varTotal    = manager.AddVar("metar.requests", 3)
		  varStations = manager.AddVar("metar.stations", 3)
		  
		  manager.SetVar(varPrev, DateTime.Now.ToString)
		  
		  //–– If reading from local file, build station index now
		  If source = fsdServer.SOURCE.SOURCE_FILE Then BuildList()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub delq(p as mmq)
		  If mmqs = Nil Then Return
		  
		  // Find the index of p in the array
		  For i As Integer = 0 To mmqs.LastIndex
		    If mmqs(i).StringValue(true) = p.StringValue(true) Then
		      
		      // Remove element at i
		      Dim upper As Integer = mmqs.LastIndex
		      If upper = 0 Then
		        // Last element → clear the array
		        mmqs = Nil
		        
		      ElseIf i = 0 Then
		        // Removing the first element
		        Dim tmp() As mmq
		        // Copy indices 1…upper into new array 0…upper-1
		        For j As Integer = 1 To upper
		          tmp.Append(mmqs(j))
		        Next
		        mmqs = tmp
		        
		      ElseIf i = upper Then
		        // Removing the last element → just shrink
		        mmqs.RemoveAt(mmqs.LastIndex)
		        
		      Else
		        // Removing a middle element
		        mmqs.RemoveAt(i)
		      End If
		      
		      // Done
		      Exit
		    End If
		  Next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub dodownload()
		  // 1) Handle FTP‐control timeout
		  If (MTime() - prevDownload) > MAXMETARDOWNLOADTIME Then
		    dolog(L_WARNING, "METAR download interrupted due to timeout")
		    StopDownload()
		    StartDownload()
		    Return
		  End If
		  // 2) Read from control socket (FTP commands/responses)
		  If controlSocket <> Nil And controlSocket.IsConnected Then
		    If controlSocket.BytesAvailable > 0 Then
		      Dim resp As String = controlSocket.Read(controlSocket.BytesAvailable)
		      If resp.Length = 0 Then
		        // Server closed control connection → download done
		        StopDownload()
		        newFileReady = True
		      ElseIf passiveMode Then
		        // Accumulate into buffer and look for “227 Entering Passive Mode”
		        sockRecvBuffer = sockRecvBuffer + resp
		        HandlePasvControl()
		      End If
		    End If
		  End If
		  
		  
		  // 4) Read incoming METAR bytes
		  Dim tos as TextOutputStream = TextOutputStream.Open(ioout)
		  
		  If dataReadSocket.BytesAvailable > 0 Then
		    Dim chunk As String = dataReadSocket.Read(dataReadSocket.BytesAvailable)
		    If chunk.Length = 0 Then
		      // EOF on data connection
		      StopDownload()
		      newFileReady = True
		    Else
		      // Write into the temp file
		      tos.Write(chunk)
		      metarSize = metarSize + chunk.Length
		    End If
		  End If
		  tos.Close()
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub doparse(q as mmq)
		  // 1) Rebuild index if METAR file changed
		  CheckMetarFile()
		  
		  // 2) Normalize station code (first 4 chars, uppercase)
		  Dim metID As String = q.MetarId.Left(4).Uppercase
		  
		  // 3) Locate in stationList
		  Dim idx As Integer = -1
		  For i As Integer = 0 To stationList.Ubound
		    If stationList(i).Name = metID Then
		      idx = i 
		      Exit For
		    End If
		  Next
		  
		  // 4) If not found, send “no wx” and dequeue
		  If idx = -1 Then
		    ServerInterface.SendNoWx(q.Destination, q.Fd, q.MetarId)
		    DelQ(q)
		    Return
		  End If
		  
		  // 5) Open METAR file and seek to the stored offset
		  Dim f As FolderItem = GetFolderItem(METARFILE)
		  If f = Nil Or Not f.Exists Then Return
		  
		  Dim bs As BinaryStream = BinaryStream.Open(f, False)
		  bs.Position = stationList(idx).Location
		  
		  // 6) Read lines of this report, concatenating
		  Dim report As String = ""
		  Dim firstLine As Boolean = True
		  While True
		    Dim piece As String = ReadLine(bs)
		    If piece = "" Then Exit While
		    
		    Dim isCont As Boolean = piece.Left(5) = "     "
		    If isCont And firstLine Then Exit While
		    If Not isCont And Not firstLine Then Exit While
		    
		    firstLine = False
		    If isCont Then
		      report = report + piece.Mid(5)
		    Else
		      report = report + piece
		    End If
		  Wend
		  bs.Close
		  
		  // 7) Dispatch the result
		  If q.Parsed = true Then
		    // Split into tokens
		    Dim raw() As String = report.ReplaceAll(Chr(9)," ").Split(" ")
		    Dim args() As String
		    For Each t As String In raw
		      t = t.Trim
		      If t <> "" Then args.Append(t)
		    Next
		    
		    // Construct WProfile: (name, creationTime, origin)
		    Dim pr As New WProfile( _
		    stationList(idx).Name, _
		    DateTime.Now, _
		    q.MetarId)
		    
		    // ParseMetar now takes (tokens() As String, count As Integer)
		    pr.ParseMetar(args, args.Ubound + 1)
		    
		    ServerInterface.SendWeather(q.Destination, q.Fd, pr)
		    
		  Else
		    ServerInterface.SendMetar( _
		    q.Destination, q.Fd, stationList(idx).Name, report)
		  End If
		  
		  // 8) Update stats and remove from queue
		  manager.IncVar(varTotal)
		  DelQ(q)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getline(bs as binaryStream, line as string) As Boolean
		  If bs.EndOfFile Then
		    Return False
		  End If
		  
		  // Read up to the next LF, stripping CR yourself
		  Dim s As String = ""
		  While Not bs.EndOfFile
		    Dim b As UInt8 = bs.ReadUInt8
		    If b = &h0A Then Exit
		    If b <> &h0D Then s = s + Chr(b)
		  Wend
		  
		  If s = "" And bs.EndOfFile Then
		  End If
		  Return True
		  
		  
		  // strip trailing “=” or any leftover CR/LF
		  PrepareLine(s)
		  line = s
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function getvariation(num as integer, minVal as integer, maxVal as integer) As Integer
		  Dim val   As Integer = variation(num)
		  Dim range As Integer = (maxVal - minVal) + 1
		  // abs() then mod the range, then shift into [minVal…maxVal]
		  Return (Abs(val) Mod range) + minVal
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub HandlePasvControl()
		  // Split on newline (we treat both CR+LF as EndOfLine)
		  Dim lines() As String = sockRecvBuffer.Split(EndOfLine)
		  For Each ln As String In lines
		    If ln.Trim.Length < 3 Then Continue
		    // Look for a 227 reply
		    Dim code As Integer
		    Try
		      code = Val(ln.Left(3))
		    Catch
		      Continue
		    End Try
		    If code = 227 And ln.InStr("(") > 0 And ln.InStr(")") > ln.InStr("(") Then
		      // Extract h1,h2,h3,h4,p1,p2
		      Dim nums() As String = ln.Mid(ln.InStr("(")+1, ln.InStr(")")-ln.InStr("(")-1).Split(",")
		      If nums.Ubound = 5 Then
		        Dim ipAddr As String = nums(0)+"."+nums(1)+"."+nums(2)+"."+nums(3)
		        Dim portNum As Integer = Val(nums(4)) * 256 + Val(nums(5))
		        
		        // Connect data socket
		        dataReadSocket = New TCPSocket
		        dataReadSocket.Address = ipAddr
		        dataReadSocket.Port    = portNum
		        dataReadSocket.Connect
		        
		        // Send the RETR command for current hour
		        Dim hr As Integer = (DateTime.Now.Hour + 21) Mod 24
		        Dim cmd As String = "RETR " + PadLeft(hr.ToString,2,"0") + "Z.TXT" + EndOfLine
		        controlSocket.Write(cmd)
		        dolog(L_INFO, "METAR: Starting download of METAR data")
		      End If
		    End If
		  Next
		  
		  // Clear buffer (or keep tail if you want partial‐line safety)
		  sockRecvBuffer = ""
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub prepareline(line as string)
		  While line.Length > 0
		    Dim lastChar As String = line.Right(1)
		    If lastChar = "=" Or lastChar = Chr(13) Or lastChar = Chr(10) Then
		      line = line.Left(line.Length - 1)
		    Else
		      Exit
		    End If
		  Wend
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function ReadLine(bs As BinaryStream) As String
		  Dim s As String = ""
		  While bs.Position < bs.Length
		    Dim b As UInt8 = bs.ReadUInt8
		    // LF (10) ends the line
		    If b = &h0A Then Exit
		    // strip CR (13), otherwise accumulate
		    If b <> &h0D Then s = s + Chr(b)
		  Wend
		  Return s
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub requestmetar(client as string, metar as string, parsed as boolean, fd as integer)
		  // If we’re configured to fetch via the network, find the best peer
		  If source = fsdServer.SOURCE.SOURCE_NETWORK Then
		    Dim temp    As Server = myserver
		    Dim best    As Server = Nil
		    Dim bestHops As Integer = -1
		    
		    // Walk the linked list of servers
		    
		    for i as integer = 0 to servers.LastIndex
		      temp = Servers(i)
		      If temp <> myServer And (temp.Flags And SERVER_METAR) <> 0 Then
		        // Choose the lowest-hops server (excluding hops = –1), or first match
		        If best = Nil Or (temp.Hops < bestHops And temp.Hops <> -1) Then
		          best    = temp
		          bestHops = temp.Hops
		        End If
		      End If
		    next
		    
		    
		    // Nothing to forward to?
		    
		    
		    // Forward the request
		    ServerInterface.SendReqMetar(client, metar, fd, parsed, best)
		    
		  Else
		    // Local mode: enqueue for later processing
		    AddQ(client, metar, parsed, fd)
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub run()
		  // 1) If in network‐forward mode, do nothing locally
		  If source = fsdServer.SOURCE.SOURCE_NETWORK Then Return
		  
		  // 2) If we’re in the middle of an FTP download, pump it
		  If downloading Then
		    DoDownload()
		  End If
		  
		  // 3) Process any queued METAR requests
		  //    We always look at the first element in 'mmqs'
		  While mmqs <> Nil And mmqs.Ubound >= 0
		    DoParse(mmqs(0))
		  Wend
		  
		  // 4) If a download just finished, install the new file
		  If Not downloading And newFileReady Then
		    SetupNewFile()
		  End If
		  
		  // 5) Perform periodic checks (new download, reseed RNG, etc.)
		  Check()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub setupnewfile()
		  // Clear the flag
		  newFileReady = False
		  
		  // 1) Reject too‐small downloads
		  If metarSize < 100000 Then
		    Dim newF As FolderItem = GetFolderItem(METARFILENEW)
		    If newF <> Nil And newF.Exists Then newF.Delete
		    dolog(L_WARNING, _
		    "METAR: Size of new METAR file (" + metarSize.ToText + ") is too small, dropping.")
		    Return
		  End If
		  
		  // 2) Remove old METAR file
		  Dim oldF As FolderItem = GetFolderItem(METARFILE)
		  If oldF <> Nil And oldF.Exists Then oldF.Delete
		  
		  // 3) Rename the new file into place
		  Dim newF As FolderItem = GetFolderItem(METARFILENEW)
		  If newF <> Nil And newF.Exists Then
		    newF.name = METARFILE
		    dolog(L_INFO, "METAR: Installed new METAR data.")
		     
		  Else
		    dolog(L_ERR, "METAR: New METAR file not found: " + METARFILENEW)
		  End If
		  
		  // 4) Rebuild the station index and update the timestamp
		  BuildList()
		  manager.SetVar(varPrev, DateTime.Now.ToString)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function SourceToString(source as fsdServer.SOURCE) As string
		  select case source
		  Case fsdServer.SOURCE.SOURCE_DOWNLOAD
		    return "download"
		  Case fsdServer.SOURCE.SOURCE_FILE
		    return "file"
		  Case fsdServer.SOURCE.SOURCE_NETWORK
		    return "network"
		  End Select
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub startdownload()
		  // Prevent concurrent downloads
		  If downloading Then
		    dolog(L_ERR, "METAR: server seems to be still loading")
		    Return
		  End If
		  
		  // 1) Timestamp this download attempt
		  prevDownload = MTime()
		  
		  // 2) Prepare the temp file
		  ioout = GetFolderItem(METARFILENEW)
		  If ioout <> Nil And ioout.Exists Then ioout.Delete
		  // Create zero-length file so TextOutputStream.Open will succeed
		  Dim t0 As TextOutputStream = TextOutputStream.Create(ioout)
		  t0.Close
		  metarSize = 0
		  
		  // 3) Open FTP control connection
		  controlSocket = New TCPSocket
		  controlSocket.Address = metarHost
		  controlSocket.Port    = 21
		  Try
		    controlSocket.Connect
		  Catch err As IOException
		    dolog(L_ERR, "METAR: Could not connect to FTP on " + metarHost + ": " + err.Message)
		    StopDownload()
		    Return
		  End Try
		  
		  // 4) Prepare data listener (active mode)
		  dataListener = New ServerSocket
		  // Listen on any port
		  dataListener.Listen()
		  
		  // 5) Send FTP login & CWD
		  Dim cmd As String = _
		  "USER anonymous" + EndOfLine + _
		  "PASS " + ftpEmail + EndOfLine + _
		  "CWD "  + metarDir  + EndOfLine
		  
		  // 6) Passive vs. Active
		  If passiveMode Then
		    cmd = cmd + "PASV" + EndOfLine
		    // We'll send RETR once we get the 227 response in HandlePasvControl()
		  Else
		    // Build PORT h1,h2,h3,h4,p1,p2
		    Dim localIP As String = controlSocket.LocalAddress
		    Dim octets() As String = localIP.Split(".")
		    Dim p As Integer = dataListener.Port
		    Dim p1 As Integer = p \ 256
		    Dim p2 As Integer = p Mod 256
		    Dim portCmd As String = _
		    "PORT " + octets(0) + "," + octets(1) + "," + _
		    octets(2) + "," + octets(3) + "," + _
		    p1.ToText + "," + p2.ToText + EndOfLine
		    
		    cmd = cmd + portCmd
		    
		    // Immediately send RETR for current cycle hour
		    Dim hr As Integer = (DateTime.Now.Hour + 21) Mod 24
		    cmd = cmd + "RETR " + PadLeft(hr.ToString,2, "0") + "Z.TXT" + EndOfLine
		    dolog(L_INFO, "METAR: Starting download of METAR data")
		  End If
		  
		  // 7) Dispatch control commands
		  controlSocket.Write(cmd)
		  
		  // 8) Mark state
		  downloading     = True
		  sockRecvBuffer  = ""
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub stopdownload()
		  // 1) Close FTP control socket
		  If controlSocket <> Nil Then
		    Try
		      controlSocket.Close
		    Catch
		    End Try
		    controlSocket = Nil
		  End If
		  
		  // 2) Close the data‐connection socket
		  If dataReadSocket <> Nil Then
		    Try
		      dataReadSocket.Close
		    Catch
		    End Try
		    dataReadSocket = Nil
		  End If
		  
		  // 3) Shut down the listening socket (active mode)
		  If dataListener <> Nil Then
		    Try
		      dataListener.StopListening()
		    Catch
		    End Try
		    dataListener = Nil
		  End If
		  
		  // 4) Clear any buffered PASV response
		  sockRecvBuffer = ""
		  
		  // 5) Reset flags
		  downloading = False
		End Sub
	#tag EndMethod


	#tag Note, Name = Description
		
		Metar Manager
	#tag EndNote


	#tag Property, Flags = &h0
		controlSocket As TCPSOcket
	#tag EndProperty

	#tag Property, Flags = &h0
		dataListener As ServerSocket
	#tag EndProperty

	#tag Property, Flags = &h0
		datareadsock As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		dataReadSocket As TCPSocket
	#tag EndProperty

	#tag Property, Flags = &h0
		datasock As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		downloading As Boolean
	#tag EndProperty

	#tag Property, Flags = &h0
		ftpemail As string
	#tag EndProperty

	#tag Property, Flags = &h0
		ioin As FolderItem
	#tag EndProperty

	#tag Property, Flags = &h0
		ioout As FolderItem
	#tag EndProperty

	#tag Property, Flags = &h0
		metardir As string
	#tag EndProperty

	#tag Property, Flags = &h0
		metarfiletime As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		metarhost As string
	#tag EndProperty

	#tag Property, Flags = &h0
		metarsize As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		mmqs() As MMQ
	#tag EndProperty

	#tag Property, Flags = &h0
		newfileready As Boolean
	#tag EndProperty

	#tag Property, Flags = &h0
		nstations As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		passivemode As Boolean
	#tag EndProperty

	#tag Property, Flags = &h0
		prevdownload As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		prevhour As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		rootq As fsdServer.mmq
	#tag EndProperty

	#tag Property, Flags = &h0
		sock As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		sockrecvbuffer As string
	#tag EndProperty

	#tag Property, Flags = &h0
		sockrecvbufferlen As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		source As fsdServer.SOURCE
	#tag EndProperty

	#tag Property, Flags = &h0
		stationlist() As station
	#tag EndProperty

	#tag Property, Flags = &h0
		variation() As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varprev As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varstations As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		vartotal As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevdownload"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="metarfiletime"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="nstations"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevhour"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="sock"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="datasock"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="datareadsock"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="newfileready"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Boolean"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="metarsize"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="sockrecvbuffer"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="string"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="sockrecvbufferlen"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varprev"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="vartotal"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varstations"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="metarhost"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="string"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="metardir"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="string"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="ftpemail"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="string"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="passivemode"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Boolean"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="downloading"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Boolean"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="source"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="fsdServer.SOURCE"
			EditorType="Enum"
			#tag EnumValues
				"0 - SOURCE_NETWORK"
				"1 - SOURCE_FILE"
				"2 - SOURCE_DOWNLOAD"
			#tag EndEnumValues
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\servinterface.xojo_code}
```xojo
#tag Class
Protected Class servinterface
Inherits fsdServer.tcpinterface
	#tag Method, Flags = &h0
		Function assemble(cmds As CMD, toDest As String, fromID As String, bi As Boolean, pc As Integer, hc As Integer, data As String) As String
		  Dim typeChar As String = If(bi, "B", "U")
		  Return svcmdnames(cmds) + ":" + toDest + ":" + fromID + ":" + _
		  typeChar + pc.ToText + ":" + hc.ToText + ":" + data
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub clientdropped(who as client)
		  for each u as servuser in ServUsers
		    if u.thissserver <> nil and (u.thissserver.flags and SERVER_SILENT) <> 0 then
		      sendrmclient(u,u.thissserver.ident,who,Nil)
		    end
		  next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(port As Integer, code As String, dataDir As String)
		  // 1) Initialize base TCP interface
		  Super.Constructor(port, code, dataDir)
		  
		  // 2) Initialize packet counters
		  PacketCount      = 0
		  VarMChHandled    = Manager.AddVar("protocol.multicast.handled", 2)
		  VarMCDrops       = Manager.AddVar("protocol.multicast.dropped", 2)
		  VarUChHandled    = Manager.AddVar("protocol.unicast.handled", 2)
		  VarUCOverrun     = Manager.AddVar("protocol.unicast.overruns", 2)
		  VarFailed        = Manager.AddVar("protocol.errors.invalidcommand",2)
		  VarBounce        = Manager.AddVar("protocol.errors.bounce", 2)
		  VarShape         = Manager.AddVar("protocol.errors.shape", 2)
		  VarInterr        = Manager.AddVar("protocol.errors.integer", 2)
		  
		  // 3) Store our server identity
		  ServerIdent      = myserver.Ident
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub incpacketcount()
		  PacketCount = PacketCount + 1
		  If PacketCount < 0 Or PacketCount > 2000000000 Then
		    SendReset()
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub newuser(fd as integer, peername as string, portnum as integer, g as integer)
		  Dim su As New ServUser(fd, Me, peername, portnum, g)
		  InsertUser(su)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function run() As Boolean
		  // Current time (seconds since 1970)
		  Dim now As Int64 = MTime()
		  
		  // 1) Pump the TCP interface
		  Dim busy As Boolean = Super.Run()
		  
		  // 2) Periodic SYNC if timeout exceeded
		  If (now - lastSync) > SYNCTIMEOUT Then
		    SendSync()
		  End If
		  
		  // 3) Drop any servuser still in init state too long
		  For Each u As ServUser In ServUsers
		    If Not u.ClientOk _
		      And (now - u.StartupTime) > SERVERMAXTOOK Then
		      
		      u.Kill(KILL.INITTIMEOUT)
		    End If
		  Next
		  
		  Return busy
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendaddclient(dest As String, who As Client, direction As AbsUser, source As AbsUser, feed As Boolean)
		  Dim buf As String = _
		  who.Cid + ":" + who.Location.Ident + ":" + who.Callsign + ":" + _
		  who.Type.ToText + ":" + who.Rating.ToText + ":" + who.Protocol + ":" + _
		  who.RealName + ":" + who.SimType.ToString
		  
		  SendPacket(Nil, direction, CMD.ADDCLIENT, dest, ServerIdent, PacketCount, 0, False, buf)
		  IncPacketCount()
		  
		  // Also notify local clients if not a feed
		  If Not feed Then
		    If who.Type = CLIENT_ATC Then
		      ClientInterface.SendAA(who, source)
		    ElseIf who.Type = CLIENT_PILOT Then
		      ClientInterface.SendAP(who, source)
		    End If
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendaddwp(direction as absuser, wp as wprofile)
		  Dim weather As String = wp.Print() 
		  Dim buf     As String = wp.Name + ":" + wp.Version.ToText + ":" + wp.Origin + ":" + weather
		  
		  SendPacket(Nil, direction, CMD.ADDWPROF, "*", ServerIdent, PacketCount, 0, False, buf)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendatcdata(who as client, ex as absuser)
		  Dim data As String = _
		  who.Callsign + ":" + who.Frequency.ToText + ":" + _
		  who.FacilityType.ToText + ":" + who.VisualRange.ToText + ":" + _
		  who.Rating.ToText + ":" + Format(who.Lat, "0.00000") + ":" + _
		  Format(who.Lon, "0.00000") + ":" + who.Altitude.ToText
		  
		  SendPacket(Nil, Nil, CMD.AD, "*", ServerIdent, PacketCount, 0, False, data)
		  ClientInterface.SendAtcPos(who, ex)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendcert(dest as string, cmd as integer, who as certificate, direction as absuser)
		  Dim data As String = _
		  cmd.ToText + ":" + who.Cid + ":" + who.Password + ":" + _
		  who.Level.ToText + ":" + who.creationTime.ToString + ":" + who.Origin
		  Dim c as fsdServer.CMD = fsdServer.cmd.CERT
		  SendPacket(Nil, direction, c, dest, ServerIdent, PacketCount, 0, False, data)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub senddelwp(wp as wprofile)
		  // Instruct all peers to delete this weather profile
		  SendPacket( _
		  Nil, _
		  Nil, _
		  CMD.DELWPROF, _
		  "*", _
		  ServerIdent, _
		  PacketCount, _
		  0, _
		  False, _
		  wp.Name _
		  )
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendkill(who as client, reason as string)
		  // Local kill?
		  If who.Location = MyServer Then
		    ClientInterface.HandleKill(who, reason)
		    Return
		  End If
		  
		  // Remote kill
		  Dim data As String = who.Callsign + ":" + reason
		  SendPacket( _
		  Nil, _
		  Nil, _
		  CMD.KILL, _
		  who.Location.Ident, _
		  ServerIdent, _
		  PacketCount, _
		  0, _
		  True, _
		  data _
		  )
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendlinkdown(data as string)
		  SendPacket(Nil, Nil, CMD.LINKDOWN, "*", ServerIdent, PacketCount, 0, True, data)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendmetar(dest as string, fd as integer, station as string, data as string)
		  If dest.Lowercase = ServerIdent.Lowercase Then
		    SystemInterface.ReceiveMetar(fd, station, data)
		    Return
		  End If
		  
		  // To a local client?
		  If dest.Left(1) = "%" Then
		    Dim c As Client = GetClient(dest.Mid(2))
		    If c <> Nil And c.Location = MyServer Then
		      ClientInterface.SendMetar(c, data)
		      Return
		    End If
		  End If
		  
		  // Otherwise send on the network
		  Dim buf As String = station + ":" + fd.ToText + ":" + data
		  SendPacket(Nil, Nil, CMD.METAR, dest, ServerIdent, PacketCount, 0, False, buf)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendmulticast(source as client, dest as string, s as string, cmd as CL, multiok as boolean, ex as absuser)
		  
		  Dim destination As Client
		  Dim servdest    As String
		  Dim sourcestr   As String = If(source <> Nil, source.Callsign, "server")
		  
		  // Special handling for server‐targeted ping
		  If source <> Nil And dest.Lowercase = "server" Then
		    Select Case cmd
		    Case CL.PING
		      ClientInterface.SendGeneric(source.Callsign, source, Nil, Nil, "server", s, CL.PONG)
		    End Select
		    Return 
		  End If
		  
		  // Determine server‐dest
		  Select Case dest.Left(1)
		  Case "@", "*"
		    If Not multiok Then Return 
		    servdest = dest
		  Case Else
		    servdest = "%" + dest
		    destination = GetClient(dest)
		    If destination = Nil Then Return 
		  End Select
		  
		  Dim data As String = clcmdnames(cmd) + ":" + sourcestr + ":" + s
		  SendPacket(Nil, Nil, fsdServer.cmd.MULTIC, servdest, ServerIdent, PacketCount, 0, False, data)
		  IncPacketCount()
		  
		  ClientInterface.SendGeneric(dest, destination, ex, source, sourcestr, s, cmd)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendnowx(dest as string, fd as integer, station as string)
		  If dest.Lowercase = ServerIdent.Lowercase Then
		    SystemInterface.ReceiveNoWx(fd, station)
		    Return
		  End If
		  
		  If dest.Left(1) = "%" Then
		    Dim c As Client = GetClient(dest.Mid(2))
		    If c <> Nil And c.Location = MyServer Then
		      ClientInterface.SendNoWx(c, station)
		      Return
		    End If
		  End If
		  
		  Dim buf As String = station + ":" + fd.ToText
		  SendPacket(Nil, Nil, CMD.NOWX, dest, ServerIdent, PacketCount, 0, False, buf)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendpacket(exclude as absuser, direction as absuser, cmdnum as CMD, tos as string, from as string, pc as integer, hc as integer, bi as boolean, data as string)
		  // 1) Increase hop count
		  hc = hc + 1
		  
		  // 2) Build packet text
		  Dim packet As String = Assemble(cmdnum, tos, from, bi, pc, hc, data)
		  
		  // 3) Determine if soft‐limit check applies
		  Dim slcheck As Boolean = (cmdnum = CMD.PD Or cmdnum = CMD.AD)
		  
		  // 4) If a specific direction is given, send only there
		  If direction <> Nil Then
		    direction.Send(packet + EndOfLine)
		    Return
		  End If
		  
		  // 5) Route based on toDest first character
		  Dim firstChar As String = tos.Left(1)
		  
		  Select Case firstChar
		    
		  Case "@", "*"
		    // Broadcast to all servers/users
		    Dim outPkt As String = packet
		    If Not bi Then
		      // mark as broadcast
		      outPkt = Assemble(cmdnum, tos, from, True, pc, hc, data)
		    End If
		    For Each u As ServUser In ServUsers
		      If u <> exclude And (SilentOk(Integer(cmdnum)) Or u.thissserver = Nil Or _
		        (u.thissserver.flags And SERVER_SILENT) = 0) Then
		        u.Send(outPkt + EndOfLine)
		      End If
		    Next
		    
		  Case "%"
		    // Pilot destination
		    Dim callsign As String = tos.Mid(2)
		    Dim c        As Client = GetClientByCallsign(callsign)
		    If c <> Nil Then
		      Dim destSrv As Server = c.Location
		      If destSrv = myServer Then
		        // local broadcast
		        Dim outPkt As String = packet
		        If Not bi Then
		          outPkt = Assemble(cmdnum, tos, from, True, pc, hc, data)
		        End If
		        For Each u As ServUser In ServUsers
		          If u <> exclude And (SilentOk(Integer(cmdnum)) Or u.thissserver = Nil Or _
		            (u.thissserver.Flags And SERVER_SILENT) = 0) Then
		            u.Send(outPkt + EndOfLine)
		          End If
		        Next
		      ElseIf destSrv.Path <> Nil Then
		        // forward to that server link
		        destSrv.Path.Send(packet + EndOfLine)
		      Else
		        // fallback broadcast
		        Dim outPkt As String = packet
		        If Not bi Then
		          outPkt = Assemble(cmdnum, tos, from, True, pc, hc, data)
		        End If
		        For Each u As ServUser In ServUsers
		          If u <> exclude And (SilentOk(Integer(cmdnum)) Or u.thissserver = Nil Or _
		            (u.thissserver.Flags And SERVER_SILENT) = 0) Then
		            u.Send(outPkt + EndOfLine)
		          End If
		        Next
		      End If
		    End If
		    
		  Case Else
		    // Specific server by ident
		    Dim destSrv As Server = Server.GetServer(tos)
		    If destSrv <> Nil Then
		      If destSrv.Path <> Nil Then
		        destSrv.Path.send(packet + EndOfLine)
		      Else
		        // fallback broadcast
		        Dim outPkt As String = packet
		        If Not bi Then
		          outPkt = Assemble(cmdnum, tos, from, True, pc, hc, data)
		        End If
		        For Each u As ServUser In servUsers
		          If u <> exclude And (SilentOk(Integer(cmdnum)) Or u.thissserver = Nil Or _
		            (u.thissserver.Flags And SERVER_SILENT) = 0) Then
		            u.Send(outPkt + EndOfLine)
		          End If
		        Next
		      End If
		    End If
		  End Select
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendpilotdata(who as client, ex as absuser)
		  Dim data As String = _
		  who.IdentFlag + ":" + who.Callsign + ":" + who.Transponder.ToText + ":" + _
		  who.Rating.ToText + ":" + Format(who.Lat, "0.00000") + ":" + _
		  Format(who.Lon, "0.00000") + ":" + who.Altitude.ToText + ":" + _
		  who.GroundSpeed.ToText + ":" + who.PBH.ToText + ":" + who.Flags.ToText
		  
		  SendPacket(Nil, Nil, CMD.PD, "*", ServerIdent, PacketCount, 0, False, data)
		  ClientInterface.SendPilotPos(who, ex)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendping(dest as string, data as string)
		  SendPacket(     _
		  Nil,          _   // no exclude
		  Nil,          _  // no specific directio
		  CMD.Ping,     _  // command number
		  dest,         _  // to
		  ServerIdent,  _  // from
		  PacketCount,  _  // packet count
		  0,            _  // hop count
		  False,        _  // not yet broadcast
		  data          _  // payload
		  )
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendplan(dest as string, who as client, direction as absuser)
		  Dim plan As FlightPlan = who.Plan
		  If plan = Nil Then Return
		  
		  Dim buf As String = _
		  who.Callsign + ":" + plan.Revision.ToText + ":" + _
		  plan.Type.ToText + ":" + plan.Aircraft + ":" + _
		  plan.TAScruise.ToText + ":" + plan.DepAirport + ":" + _
		  plan.DepTime.ToText + ":" + plan.actualdeptime.ToText + ":" + _
		  plan.Alt + ":" + plan.DestAirport + ":" + _
		  plan.HrsEnRoute.ToText + ":" + plan.MinEnRoute.ToText + ":" + _
		  plan.HrsFuel.ToText + ":" + plan.MinFuel.ToText + ":" + _
		  plan.AltAirport + ":" + plan.Remarks + ":" + plan.Route
		  
		  SendPacket(Nil, direction, CMD.PLAN, dest, ServerIdent, PacketCount, 0, False, buf)
		  IncPacketCount()
		  ClientInterface.SendPlan(Nil, who, 400)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendpong(dest as string, data as string)
		  SendPacket(Nil, Nil, CMD.PONG, dest, ServerIdent, PacketCount, 0, False, data)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendreqmetar(client as string, metar as string, fd as integer, parsed as boolean, dest as server)
		  Dim buf As String = _
		  client + ":" + metar + ":" + If(parsed,"1","0") + ":" + fd.ToText
		  
		  SendPacket(Nil, Nil, CMD.REQMETAR, dest.Ident, ServerIdent, PacketCount, 0, False, buf)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendreset()
		  SendPacket(Nil, Nil, CMD.RESET, "*", ServerIdent, PacketCount, 0, False, "")
		  PacketCount = 0
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendrmclient(direction as absuser, dest as string, who as client, ex as absuser)
		  Dim buf As String = who.Callsign
		  SendPacket(Nil, direction, CMD.RMCLIENT, dest, ServerIdent, PacketCount, 0, False, buf)
		  IncPacketCount()
		  
		  If dest = "*" Then
		    If who.Type = CLIENT_ATC Then
		      ClientInterface.SendDA(who, ex)
		    ElseIf who.Type = CLIENT_PILOT Then
		      ClientInterface.SendDP(who, ex)
		    End If
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendservernotify(dest as string, subject as server, towho as absuser)
		  Dim localFlag As Integer = If(subject Is MyServer, 0, 1)
		  Dim buf As String = _
		  localFlag.ToText + ":" + subject.Ident + ":" + subject.Name + ":" + _
		  subject.Email + ":" + subject.Hostname + ":" + subject.Version + ":" + _
		  subject.Flags.ToText + ":" + subject.Location
		  
		  SendPacket(Nil, toWho, CMD.NOTIFY, dest, ServerIdent, PacketCount, 0, True, buf)
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendsync()
		  SendPacket(Nil, Nil, CMD.SYNC, "*", ServerIdent, PacketCount, 0, False, "")
		  lastSync = MTime()
		  IncPacketCount()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendweather(dest as string, fd as integer, w as wprofile)
		  // Local system?
		  If dest.Lowercase = ServerIdent.Lowercase Then
		    SystemInterface.ReceiveWeather(fd, w)
		    Return
		  End If
		  
		  // Local client?
		  If dest.Left(1) = "%" Then
		    Dim c As Client = GetClient(dest.Mid(2))
		    If c <> Nil And c.Location = MyServer Then
		      ClientInterface.SendWeather(c, w)
		      Return
		    End If
		  End If
		  
		  Dim weatherStr As String = w.Print()
		  Dim data       As String = w.Name + ":" + fd.ToText + ":" + weatherStr
		  
		  SendPacket(Nil, Nil, CMD.WEATHER, dest, ServerIdent, PacketCount, 0, False, data)
		  IncPacketCount()
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		lastsync As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		packetcount As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		serverident As String
	#tag EndProperty

	#tag Property, Flags = &h0
		varbounce As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varfailed As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varinterr As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varmcdrops As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varmchandled As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		VarMChHandled As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varshape As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varuchandled As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		VarUChHandled As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		varucoverrun As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="description"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="sock"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varcurrent"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="vartotal"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varpeak"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feedstrategy"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="floodlimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outbuflimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevchecks"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prompt"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastsync"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="packetcount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="serverident"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="varbounce"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varfailed"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varinterr"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varmcdrops"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varmchandled"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varshape"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varuchandled"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varucoverrun"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\clinterface.xojo_code}
```xojo
#tag Class
Protected Class clinterface
Inherits fsdServer.tcpinterface
	#tag Method, Flags = &h0
		Function calcrange(from as client, toc as client, type as fsdserver.cl, range as integer) As Integer
		  Dim x,y as integer
		  Select Case type
		  case CL.PILOTPOS
		    return range
		  case CL.ATCPOS
		    if toc.type = CLIENT_ATC then
		      return toc.visualrange
		    end
		    x=toc.getrange()
		    y=from.getrange()
		    if from.type = CLIENT_PILOT then //CLIENT PILOT
		      return x +y
		    end
		    if x>y then
		      return x
		    end
		    return y
		  else
		    return range
		  End Select
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor(port as integer, code as string, descr as string)
		  // Calling the overridden superclass constructor.
		  Super.Constructor(port, code, descr)
		  prevwinddelta=MTime()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function getbroad(s as string) As Integer
		  Dim broad as integer = CLIENT_ALL
		  if s = "*P" then
		    broad = CLIENT_PILOT
		  elseif s="*A" then
		    broad = CLIENT_ATC
		  end
		  return broad
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub handlekill(who as client, reason as string)
		  if who.location<>myserver then
		    return
		  end
		  
		  for each u as absuser in users
		    if u isa cluser then
		      Dim tcl as cluser = cluser(u)
		      if tcl.thisclient = who then
		        Dim buf as string = sprintf("SERVER:%s:%s",who.callsign,reason)
		        sendpacket(who,NIL,NIL,CLIENT_ALL,-1,CL.KILL,buf)
		        u.Kill(KILL.KILL)
		        clients.RemoveAt(clients.IndexOf(who))
		      end
		    end
		  next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub newuser(fd as integer, peername as string, portnum as integer, g as integer)
		  insertuser(new cluser(fd,self,peername,portnum,g))
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function run() As Boolean
		  Dim busy as Boolean = super.run()
		  if MTime()-prevwinddelta>WINDDELTATIMEOUT then
		    prevwinddelta=MTime()
		    sendwinddelta()
		  end
		  return busy
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendaa(who as client, ex as absuser)
		  Dim data as string
		  data = sprintf("%s:SERVER:%s:%s::%d",who.callsign,who.realname,who.cid,who.rating,who.protocol)
		  sendpacket(NIL,NIL,ex,CLIENT_ALL,-1,CL.ADDATC,data)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendap(who as client, ex as absuser)
		  Dim data as string
		  data = sprintf("%s:SERVER:%s::%d:%s:%d",who.callsign,who.cid,who.rating,who.protocol,who.simtype)
		  sendpacket(Nil,Nil,ex,CLIENT_ALL,-1,CL.ADDPILOT, data)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendatcpos(who as client, ex as absuser)
		  Dim data as string
		  data = sprintf("%s:%d:%d:%d:%d:%.5f:%.5f:%d",who.callsign,who.frequency,who.facilitytype,who.visualrange,who.rating,who.lat, who.lon, who.altitude)
		  sendpacket(Nil,who,ex,CLIENT_ALL,-1,CL.ATCPOS,data)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendda(who as client, ex as absuser)
		  Dim data as string
		  data = sprintf("%s:%s",who.callsign,who.cid)
		  sendpacket(NIL,NIL,ex,CLIENT_ALL,-1,CL.RMATC,data)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub senddp(who as client, ex as absuser)
		  Dim data as string
		  data = sprintf("%s:%s",who.callsign,who.cid)
		  sendpacket(NIL,NIL,ex,CLIENT_ALL,-1,CL.RMPILOT,data)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendgeneric(toc as string, dest as client, ex as absuser, source as client, from as string, s as string, cmd as CL)
		  Dim data as string
		  Dim range as integer = -1
		  data = sprintf("%s:%s:%s",from,toc,s)
		  if toc.Left(1) = "@" and source<>Nil then
		    range = source.getrange()
		  end
		  sendpacket(dest,source,ex,getbroad(toc),range,cmd,data)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendmetar(who as client, data as string)
		  sendpacket(who,NIL,NIL,CLIENT_ALL,-1,CL.REPACARS,sprintf("server:%s:METAR:%s",who.callsign,data))
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendnowx(who as client, station as string)
		  for each temp as absuser in users
		    if temp isa cluser then
		      Dim ctemp as cluser = cluser(temp)
		      if ctemp.thisclient = who then
		        Dim errC as integer= ctemp.showerror(ERR.NOWEATHER,station)
		        exit
		      end
		    end
		  next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendpacket(dest as client, source as client, exclude as absuser, broad as integer, range as integer, cmd as fsdServer.cl, data as string)
		  if dest <> nil then
		    if dest.location <> myserver then
		      return
		    end
		  end
		  for each tmp as absuser in users
		    if tmp.killFlag = 0 then
		      if tmp isa cluser then
		        Dim c as client = cluser(tmp).thisclient
		        if c = nil then
		          continue
		        end
		        if exclude = tmp then
		          continue
		        end
		        if dest<>nil and c<>dest then
		          continue
		        end
		        if c.type=0 and broad = 0 then
		          continue
		        end
		        if source<>nil and (range<>-1 or cmd=cl.PILOTPOS or cmd=cl.ATCPOS) then
		          Dim checkrange as integer = calcrange(source,c,cmd,range)
		          Dim distance as double = c.distance(source)
		          if distance <>-1 or distance >checkrange then
		            continue
		          end
		        end
		        Dim sendp as integer = 0
		        if cmd=cl.ATCPOS or cmd = cl.PILOTPOS then
		          sendp=1
		        end
		        
		        
		        tmp.USLPrintf("%s%s\r\n",1,clcmdnames(cmd),data)
		      end
		    end
		  next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendpilotpos(who as client, ex as absuser)
		  dim data as string
		  data = sprintf("%s:%s:%d:%d:%.5f:%.5f:%d:%d:%u:%d",who.identflag,who.callsign,who.transponder,who.rating,who.lat,who.lon,who.altitude,who.groundspeed,who.pbh,who.flags)
		  sendpacket(NIL,who,ex,CLIENT_ALL, -1,CL.PILOTPOS,data)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendplan(dest as client, who as client, range as integer)
		  Dim data as string
		  Dim cs as string = "*A"
		  if dest <> Nil then
		    cs = dest.callsign
		  end
		  Dim plan as flightplan = who.plan
		  data = sprintf("%s:%s:%c:%s:%d:%s:%d:%d:%s:%s:%d:%d:%d:%d:%s:%s:%s",who.callsign,cs,plan.type,plan.aircraft,plan.tascruise,plan.depairport,plan.deptime,plan.actualdeptime,plan.alt,plan.destairport,plan.hrsenroute,plan.minenroute,plan.hrsfuel,plan.minfuel,plan.altairport,plan.remarks,plan.route)
		  sendpacket(dest,nil,nil,CLIENT_ATC, range, cl.PLAN,data)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendweather(who as client, p as wprofile)
		  Dim buf as string
		  Dim part as string
		  p.fix(who.lat,who.lon)
		  buf = sprintf("%s:%s","server",who.callsign)
		  for x as integer = 0 to 3
		    Dim l as templayer = p.Temps(x)
		    part= sprintf(":%d:%d",l.ceiling,l.temp)
		    buf = buf + part
		  next
		  part = sprintf(":%d",p.Barometer)
		  buf=buf+part
		  sendpacket(who,nil,nil,CLIENT_ALL,-1,cl.TEMPDATA,buf)
		  buf = sprintf("%s:%s","server",who.callsign)
		  for x as integer = 0 to 3
		    Dim l as windlayer = p.Winds(x)
		    part = sprintf(":%d:%d:%d:%d:%d:%d",l.ceiling,l.floor,l.direction,l.speed,l.gusting,l.turbulence)
		    buf = buf + part
		  next
		  sendpacket(who,Nil,Nil,CLIENT_ALL,-1,cl.WINDDATA,buf)
		  buf = sprintf("%s:%s","server",who.callsign)
		  for x as integer = 0 to 2
		    Dim c as cloudlayer
		    if x=2 then
		      c = p.TStorm
		    else
		      c=p.Clouds(x)
		    end
		    part=Sprintf(":%d:%d:%d:%d:%d",c.ceiling,c.floor,c.coverage,c.icing,c.turbulence)
		    buf=buf+part
		  next
		  part=Sprintf(":%.2f",p.Visibility)
		  buf = buf+part
		  sendpacket(who,nil,nil,CLIENT_ALL,-1,cl.CLOUDDATA,buf)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub sendwinddelta()
		  Dim buf as string
		  Dim speed as integer = (MRand() mod 11) -5
		  Dim direction as integer = (MRand() mod 21) - 10
		  buf =Sprintf("SERVER:*:%d:%d",speed,direction)
		  sendpacket(Nil,nil,nil,CLIENT_ALL,-1,cl.WDELTA,buf)
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h21
		Private prevwinddelta As Integer
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="description"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="sock"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varcurrent"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="vartotal"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="varpeak"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feedstrategy"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="floodlimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outbuflimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevchecks"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prompt"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

{D:\Projects\FSD-Xojo-Rewrite\fsdServer\servuser.xojo_code}
```xojo
#tag Class
Protected Class servuser
Inherits fsdServer.absuser
	#tag Method, Flags = &h0
		Sub Constructor(fd As Integer, parentIF As ServInterface, peer As String, portnum As Integer, group As Integer)
		  Super.Constructor(fd, parentIF, peer, portnum, group)
		  
		  // Initialize
		  Parent      = parentIF
		  StartupTime = MTime()      // your UNIX‐timestamp helper
		  ClientOk    = False
		  thissserver  = Nil
		  
		  // Send initial state to this new server link
		  Feed()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub doparse(s as string)
		  If s.Left(1) = "#" Then Return
		  SetActive()
		  If s.Left(1) <> "\" Then
		    doparse(s)
		  Else
		    Select Case s.Mid(2,1)
		    Case "q"
		      Kill(KILL.COMMAND)
		    Case "l"
		      List(s)
		    Case Else
		      UPrintf("Syntax error, type \h for help" + EndOfLine)
		    End Select
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execad(args() as string, count as integer)
		  If count < 12 Then Return
		  Dim who As Client = fsdServer.getClient(args(4))
		  If who = Nil Then Return
		  who.UpdateATC(args)
		  clientinterface.SendAtcPos(who, Nil)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function execaddclient(args() as string, count as integer) As Boolean
		  If count < 12 Then Return True
		  Dim location As Server = fsdServer.getServer(args(5))
		  If location = Nil Or location = myserver Then Return True
		  Dim type     As Integer = args(7).ToInteger
		  Dim cs       As String  = args(6)
		  If fsdServer.getClient(cs) <> Nil Then Return False
		  Dim c As New Client(args(4), location, cs, type, args(8).ToInteger, args(9), args(10), args(11).ToInteger)
		  If type = CLIENT_ATC Then
		    clientinterface.SendAA(c, Nil)
		  Else
		    clientinterface.SendAP(c, Nil)
		  End If
		  Return True
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execaddwp(args() as string, count as integer)
		  If count<57 Or MetarManager.Source=SOURCE.SOURCE_NETWORK Then Return
		  Dim group As configgroup = configman.GetGroup("hosts")
		  Dim entry As configentry = If(group<>Nil, group.GetEntry("weather"), Nil)
		  Dim ok    As Boolean     = If(entry<>Nil, entry.InList(args(6))=1, True)
		  If Not ok Then Return
		  
		  Dim version As Integer   = args(5).ToInteger
		  Dim prof    As wprofile  = fsdServer.getwprofile(args(4))
		  If prof<>Nil And prof.Version>=version Then Return
		  If prof<>Nil Then
		    // delete old profile if your arrays support it
		  End If
		  Dim dob as double = version
		  Dim d as new DateTime(dob)
		  prof = New wprofile(args(4), D, args(6))
		  prof.LoadArray(args, count-7)
		  prof.GenRawCode()
		  wProf.add(prof)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execcert(args() as string, count as integer)
		  If count < 10 Then Return
		  Dim group As configgroup   = configman.GetGroup("hosts")
		  Dim entry As configentry   = If(group<>Nil, group.GetEntry("certificates"), Nil)
		  Dim ok    As Boolean       = If(entry<>Nil, entry.InList(args(9))=1, True)
		  Dim mode  As Integer       = args(4).ToInteger
		  Dim cid   As String        = args(5)
		  Dim pwd   As String        = args(6)
		  Dim lev   As Integer       = args(7).ToInteger
		  Dim ts    As Integer       = args(8).ToInteger
		  Dim org   As String        = If(count=12, args(11), "")
		  Dim c     As Certificate   = fsdServer.getCert(cid)
		  
		  Select Case mode
		  Case CERT_ADD
		    If c=Nil And ok Then Certificates.Add(New Certificate(cid, pwd, lev, ts, org))
		  Case CERT_DELETE
		    If c<>Nil And ok Then Certificates.RemoveAt(Certificates.IndexOf(c))
		  Case CERT_MODIFY
		    If c<>Nil And ts>c.CreationTime And ok Then c.Configure(pwd, lev, ts, org)
		  End Select
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execdelwp(args() as string, count as integer)
		  If count<5 Or MetarManager.Source=SOURCE.SOURCE_NETWORK Then Return
		  Dim group As configgroup = configman.GetGroup("hosts")
		  Dim entry As configentry = If(group<>Nil, group.GetEntry("weather"), Nil)
		  Dim ok    As Boolean     = If(entry<>Nil, entry.InList(args(1))=1, True)
		  If Not ok Then Return
		  
		  Dim prof As wprofile = fsdServer.getwprofile(args(4))
		  If prof<>Nil And prof.Active=1 Then
		    wProf.RemoveAt(wProf.IndexOf(prof))
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execkill(args() as string, count as integer)
		  If count < 6 Then Return
		  Dim c As Client = fsdServer.getClient(args(4))
		  If c <> Nil Then clientinterface.HandleKill(c, args(5))
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execlinkdown(args() as string, count as integer)
		  For i As Integer = 4 To count - 1
		    Dim ident As String = args(i)
		    Dim s As Server = fsdServer.getServer(ident)
		    If s <> Nil And s.Path = Me Then s.SetPath(Nil, -1)
		  Next
		  serverinterface.SendSync()
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execmetar(args() as string, count as integer)
		  If count < 7 Then Return
		  Dim fd      As Integer = args(5).ToInteger
		  Dim station As String  = args(4)
		  Dim report  As String  = args(6)
		  
		  If fd<>-1 Then
		    systeminterface.ReceiveMetar(fd, station, report)
		  Else
		    Dim c As Client = fsdServer.getClient(args(0).Mid(2))
		    If c<>Nil Then clientinterface.SendMetar(c, report)
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execmulticast(args() as string, count as integer)
		  If count < 7 Then Return
		  Dim cmd    As CL      = CL(args(4).ToInteger)
		  Dim source As Client  = fsdServer.getClient(args(5))
		  Dim destID As String  = args(0)
		  Dim destCl As Client
		  
		  Select Case destID.Left(1)
		  Case "*", "@"
		    ' broadcast
		  Case "%"
		    destCl = fsdServer.getClient(destID.Mid(2))
		    If destCl = Nil Then Return
		  Case Else
		    Return
		  End Select
		  
		  Dim payload As String = fsdServer.CatCommand(args, 6, "")
		  clientinterface.SendGeneric(destID, destCl, Nil, source, args(5), payload, cmd)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execnotify(args() as string, count as integer)
		  If count < 11 Then Return
		  Dim feedFlag As Boolean = (args(4).ToInteger = 0)
		  Dim ident    As String  = args(5)
		  Dim s        As Server  = fsdServer.getServer(ident)
		  If s = Nil Or s = myserver Then Return
		  
		  If s = Nil Then
		    s = New Server(ident, args(6), args(7), args(8), args(9), args(10).ToInteger, If(count=12, args(11), ""))
		  Else
		    s.Configure(args(6), args(7), args(8), args(9), If(count=12, args(11), ""))
		  End If
		  
		  If Not feedFlag And args(3).ToInteger = 1 Then
		    thissserver = s
		  End If
		  
		  If feedFlag Or (s.Hops > -1 And args(3).ToInteger >= s.Hops) Then Return
		  s.SetPath(Me, args(3).ToInteger)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execnowx(args() as string, count as integer)
		  If count < 6 Then Return
		  Dim station As String  = args(4)
		  Dim fd      As Integer = args(5).ToInteger
		  
		  If fd=-1 Then
		    Dim c As Client = fsdServer.getClient(args(0).Mid(2))
		    If c<>Nil Then clientinterface.SendNowx(c, station)
		  Else
		    systeminterface.ReceiveNowx(fd, station)
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execpd(args() as string, count as integer)
		  If count < 14 Then Return
		  Dim who As Client = fsdServer.getClient(args(5))
		  If who = Nil Then Return
		  who.UpdatePilot(args)
		  clientinterface.SendPilotPos(who, Nil)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execping(args() as string, count as integer)
		  If count < 2 Then Return
		  Dim dest    As String = args(1)
		  Dim payload As String = fsdServer.CatCommand(args, 4, "")
		  Parent.SendPong(dest, payload)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function execplan(args() as string, count as integer) As Boolean
		  If count < 21 Then Return False
		  Dim rev As Integer = args(5).ToInteger
		  Dim who As Client  = fsdServer.getClient(args(4))
		  If who = Nil Then Return True
		  If who.Plan<>Nil And who.Plan.Revision>=rev Then Return False
		  Dim route() As String
		  For i As Integer = 6 To UBound(args)
		    route.Append(args(i))
		  Next
		  who.HandleFP(route)
		  who.Plan.Revision = rev
		  clientinterface.SendPlan(Nil, who, 400)
		  Return True
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execpong(args() as string, count as integer)
		  If count < 5 Then Return
		  Dim data As String = args(4)
		  Dim fd   As Integer = data.ToInteger
		  Dim src  As Server  = fsdServer.getServer(args(1))
		  If src = Nil Then Return
		  src.ReceivePong(data)
		  If fd <> -1 Then
		    systeminterface.ReceivePong(args(1), data, args(2), args(3))
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execreqmetar(args() as string, count as integer)
		  If count < 8 Then Return
		  Dim clientID As String = args(4)
		  Dim station  As String = args(5)
		  Dim parsed   As Boolean = (args(6)="1")
		  Dim fd       As Integer = args(7).ToInteger
		  MetarManager.RequestMetar(clientID, station, parsed, fd)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execreset(args() as string, count as integer)
		  If count < 2 Then Return
		  Dim s As Server = fsdServer.getServer(args(1))
		  If s <> Nil Then s.PCount = 0
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execrmclient(args() as string, count as integer)
		  If count < 5 Then Return
		  Dim cs As String = args(4)
		  Dim c  As Client = fsdServer.getClient(cs)
		  If c <> Nil Then
		    If c.Location <> myserver Then
		      If c.Type = CLIENT_ATC Then
		        clientinterface.SendDA(c, Nil)
		      Else
		        clientinterface.SendDP(c, Nil)
		      End If
		    End If
		    clients.RemoveAt(clients.IndexOf(c))
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub execweather(args() as string, count as integer)
		  If count < 56 Then Return
		  Dim prof As New wprofile(args(4), new DateTime(0.0), "")
		  prof.LoadArray(args, count-6)
		  Dim fd As Integer = args(5).ToInteger
		  If fd=-1 Then
		    Dim c As Client = fsdServer.getClient(args(0).Mid(2))
		    If c<>Nil Then clientinterface.SendWeather(c, prof)
		  Else
		    systeminterface.ReceiveWeather(fd, prof)
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub feed()
		  ' 1) All servers
		  For Each srv As Server In servers
		    Parent.SendServerNotify("*", srv, Me)
		  Next
		  ' 2) All clients
		  For Each cl As Client In clients
		    Parent.SendAddClient("*", cl, Me, Nil, True)
		    If cl.Plan <> Nil Then Parent.SendPlan("*", cl, Me)
		  Next
		  ' 3) All certificates
		  For Each cert As Certificate In Certificates
		    Parent.SendCert("*", CERT_ADD, cert, Me)
		  Next
		  ' 4) All weather profiles
		  '    (assumes you have a global wprofiles() array)
		  For Each wp As wprofile In wProf
		    Parent.SendAddWp(Me, wp)
		  Next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub list(s as string)
		  Dim pattern As String = s.Mid(3).Trim
		  Dim buf     As String
		  Dim nvars   As Integer = manager.GetNVars()
		  
		  For i As Integer = 0 To nvars - 1
		    Dim val As String = manager.SprintValue(i, buf)
		    If val <> "" Then
		      Dim name As String = manager.GetVar(i).Name
		      If pattern = "" Or name.Uppercase.IndexOf(pattern.Uppercase) >= 0 Then
		        UPrintf("%s=%s" + EndOfLine, name, buf)
		      End If
		    End If
		  Next
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function needlocaldelivery(dest as String) As Boolean
		  Select Case dest.Left(1)
		  Case "*", "@"
		    Return True       ' wildcards always local
		  Case "%"
		    Dim c As Client = fsdServer.getClient(dest.Mid(2))
		    Return c <> Nil And c.Location = myserver
		  Case Else
		    Return dest.Lowercase = myserver.Ident.Lowercase
		  End Select
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function runcmd(num as CMD, data() as string, count as integer) As Boolean
		  Select Case num
		  Case CMD.NOTIFY     
		    execnotify(data, count)   
		    Return True
		  Case CMD.PING       
		    execping(data, count)       
		    Return True
		  Case CMD.LINKDOWN   
		    execlinkdown(data, count)   
		    Return True
		  Case CMD.PONG       
		    execpong(data, count)       
		    Return True
		  Case CMD.SYNC       
		    Return False
		  Case CMD.ADDCLIENT  
		    return execaddclient(data, count)
		  Case CMD.RMCLIENT   
		    execrmclient(data, count) 
		    Return True
		  Case CMD.PD         
		    execpd(data, count)         
		    Return True
		  Case CMD.AD         
		    execad(data, count)         
		    Return True
		  Case CMD.CERT       
		    execcert(data, count)       
		    Return True
		  Case CMD.MULTIC     
		    execmulticast(data, count)  
		    Return True
		  Case CMD.PLAN       
		    return execplan(data, count)
		  Case CMD.REQMETAR   
		    execreqmetar(data, count)   
		    Return True
		  Case CMD.WEATHER    
		    execweather(data, count)    
		    Return True
		  Case CMD.METAR      
		    execmetar(data, count)      
		    Return True
		  Case CMD.NOWX       
		    execnowx(data, count)       
		    Return True
		  Case CMD.ADDWPROF   
		    execaddwp(data, count)      
		    Return True
		  Case CMD.DELWPROF   
		    execdelwp(data, count)      
		    Return True
		  Case CMD.KILL       
		    execkill(data, count)       
		    Return True
		  Case CMD.RESET      
		    execreset(data, count)      
		    Return True
		  End Select
		  Return True
		End Function
	#tag EndMethod


	#tag Property, Flags = &h0
		clientok As Boolean
	#tag EndProperty

	#tag Property, Flags = &h0
		parent As servinterface
	#tag EndProperty

	#tag Property, Flags = &h0
		startuptime As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		thissserver As server
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="fd"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="killFlag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="inSize"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outSize"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feed"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="feedCount"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="guardFlag"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="outBufSoftLimit"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastActive"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="lastPing"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="prevFeedCheck"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="timeout"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="blocked"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="peer"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="port"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="inBuf"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="outBuf"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="prompt"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			InitialValue=""
			Type="String"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="clientok"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Boolean"
			EditorType=""
		#tag EndViewProperty
		#tag ViewProperty
			Name="startuptime"
			Visible=false
			Group="Behavior"
			InitialValue=""
			Type="Integer"
			EditorType=""
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass

```

When editing a file make sure you output the entire file not just the changes so I can copy and paste them, for xojo files output each function in a unique code block
I need help with my current Project it is an implementation of a FSD Server in Xojo, A FSD Server is a multiplayer server for
Flight Simuation where Pilots and Air Traffic Controllers can connect to the server and play a game of Flight Simulator.

I need you to convert the following cpp code of the original FSD Server to Xojo code. Answer in neatly formatted markdown. with each function or sub in  
a separate code block. Thank you for your help.
Here is the C++ Code:
